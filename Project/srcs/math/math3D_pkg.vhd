LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
LIBRARY ieee_proposed;
USE ieee_proposed.fixed_float_types.ALL;
USE ieee_proposed.fixed_pkg.ALL;
USE ieee_proposed.float_pkg.ALL;

PACKAGE math3D_pkg IS
    -- --------------------------------------------------------------------
    --               Trigonometry
    -- -------------------------------------------------------------------- 
    TYPE t_trig_table IS ARRAY (0 TO 359) OF float32;

    -- The lookup table for sine
    CONSTANT sin_table : t_trig_table := (
        "00000000000000000000000000000000",
        "00111100100011101111100001011001",
        "00111101000011101111001011000110",
        "00111101010101100101111000111010",
        "00111101100011101101110001111011",
        "00111101101100100111111010110110",
        "00111101110101100001001100000101",
        "00111101111110011001011010100010",
        "00111110000011101000001101100101",
        "00111110001000000011000001011011",
        "00111110001100011101000011010100",
        "00111110010000110110001101101111",
        "00111110010101001110011011001101",
        "00111110011001100101100110010010",
        "00111110011101111011101001100000",
        "00111110100001001000001111101110",
        "00111110100011010010000001010111",
        "00111110100101011011000110111110",
        "00111110100111100011011101111010",
        "00111110101001101011000011011111",
        "00111110101011110001110101000100",
        "00111110101101110111110000000001",
        "00111110101111111100110001101111",
        "00111110110010000000110111101001",
        "00111110110100000011111111001001",
        "00111110110110000110000101101100",
        "00111110111000000111001000101111",
        "00111110111010000111000101110001",
        "00111110111100000101111010010100",
        "00111110111110000011100011110111",
        "00111111000000000000000000000000",
        "00111111000000111101100110001001",
        "00111111000001111010100011001010",
        "00111111000010110110110101110111",
        "00111111000011110010011101000100",
        "00111111000100101101010111101000",
        "00111111000101100111100100011000",
        "00111111000110100001000010001101",
        "00111111000111011001101111111110",
        "00111111001000010001101100100100",
        "00111111001001001000110110111011",
        "00111111001001111111001101111100",
        "00111111001010110100110000100101",
        "00111111001011101001011101110010",
        "00111111001100011101010100100010",
        "00111111001101010000010011110011",
        "00111111001110000010011010100111",
        "00111111001110110011100111111111",
        "00111111001111100011111010111101",
        "00111111010000010011010010100110",
        "00111111010001000001101101111101",
        "00111111010001101111001100001010",
        "00111111010010011011101100010011",
        "00111111010011000111001101100000",
        "00111111010011110001101110111101",
        "00111111010100011011001111110011",
        "00111111010101000011101111001110",
        "00111111010101101011001100011101",
        "00111111010110010001100110101110",
        "00111111010110110110111101010001",
        "00111111010111011011001111010111",
        "00111111010111111110011100010100",
        "00111111011000100000100011011010",
        "00111111011001000001100100000001",
        "00111111011001100001011101011110",
        "00111111011010000000001111001010",
        "00111111011010011101111000011101",
        "00111111011010111010011000110101",
        "00111111011011010101101111101100",
        "00111111011011101111111100100000",
        "00111111011100001000111110110010",
        "00111111011100100000110110000001",
        "00111111011100110111100001110001",
        "00111111011101001101000001100011",
        "00111111011101100001010100111111",
        "00111111011101110100011011101010",
        "00111111011110000110010101001101",
        "00111111011110010111000001010001",
        "00111111011110100110011111100010",
        "00111111011110110100101111101011",
        "00111111011111000001110001011100",
        "00111111011111001101100100100101",
        "00111111011111011000001000110101",
        "00111111011111100001011110000001",
        "00111111011111101001100011111101",
        "00111111011111110000011010011110",
        "00111111011111110110000001011100",
        "00111111011111111010011000101111",
        "00111111011111111101100000010100",
        "00111111011111111111011000000101",
        "00111111100000000000000000000000",
        "00111111011111111111011000000101",
        "00111111011111111101100000010100",
        "00111111011111111010011000101111",
        "00111111011111110110000001011100",
        "00111111011111110000011010011110",
        "00111111011111101001100011111101",
        "00111111011111100001011110000001",
        "00111111011111011000001000110101",
        "00111111011111001101100100100101",
        "00111111011111000001110001011100",
        "00111111011110110100101111101011",
        "00111111011110100110011111100010",
        "00111111011110010111000001010001",
        "00111111011110000110010101001101",
        "00111111011101110100011011101010",
        "00111111011101100001010100111111",
        "00111111011101001101000001100011",
        "00111111011100110111100001110001",
        "00111111011100100000110110000001",
        "00111111011100001000111110110010",
        "00111111011011101111111100100000",
        "00111111011011010101101111101100",
        "00111111011010111010011000110101",
        "00111111011010011101111000011101",
        "00111111011010000000001111001010",
        "00111111011001100001011101011110",
        "00111111011001000001100100000001",
        "00111111011000100000100011011010",
        "00111111010111111110011100010100",
        "00111111010111011011001111010111",
        "00111111010110110110111101010001",
        "00111111010110010001100110101110",
        "00111111010101101011001100011101",
        "00111111010101000011101111001110",
        "00111111010100011011001111110011",
        "00111111010011110001101110111101",
        "00111111010011000111001101100000",
        "00111111010010011011101100010011",
        "00111111010001101111001100001010",
        "00111111010001000001101101111101",
        "00111111010000010011010010100110",
        "00111111001111100011111010111101",
        "00111111001110110011100111111111",
        "00111111001110000010011010100111",
        "00111111001101010000010011110011",
        "00111111001100011101010100100010",
        "00111111001011101001011101110010",
        "00111111001010110100110000100101",
        "00111111001001111111001101111100",
        "00111111001001001000110110111011",
        "00111111001000010001101100100100",
        "00111111000111011001101111111110",
        "00111111000110100001000010001101",
        "00111111000101100111100100011000",
        "00111111000100101101010111101000",
        "00111111000011110010011101000100",
        "00111111000010110110110101110111",
        "00111111000001111010100011001010",
        "00111111000000111101100110001001",
        "00111111000000000000000000000000",
        "00111110111110000011100011110111",
        "00111110111100000101111010010100",
        "00111110111010000111000101110001",
        "00111110111000000111001000101111",
        "00111110110110000110000101101100",
        "00111110110100000011111111001001",
        "00111110110010000000110111101001",
        "00111110101111111100110001101111",
        "00111110101101110111110000000001",
        "00111110101011110001110101000100",
        "00111110101001101011000011011111",
        "00111110100111100011011101111010",
        "00111110100101011011000110111110",
        "00111110100011010010000001010111",
        "00111110100001001000001111101110",
        "00111110011101111011101001100000",
        "00111110011001100101100110010010",
        "00111110010101001110011011001101",
        "00111110010000110110001101101111",
        "00111110001100011101000011010100",
        "00111110001000000011000001011011",
        "00111110000011101000001101100101",
        "00111101111110011001011010100010",
        "00111101110101100001001100000101",
        "00111101101100100111111010110110",
        "00111101100011101101110001111011",
        "00111101010101100101111000111010",
        "00111101000011101111001011000110",
        "00111100100011101111100001011001",
        "00100101000011010011000100110010",
        "10111100100011101111100001011001",
        "10111101000011101111001011000110",
        "10111101010101100101111000111010",
        "10111101100011101101110001111011",
        "10111101101100100111111010110110",
        "10111101110101100001001100000101",
        "10111101111110011001011010100010",
        "10111110000011101000001101100101",
        "10111110001000000011000001011011",
        "10111110001100011101000011010100",
        "10111110010000110110001101101111",
        "10111110010101001110011011001101",
        "10111110011001100101100110010010",
        "10111110011101111011101001100000",
        "10111110100001001000001111101110",
        "10111110100011010010000001010111",
        "10111110100101011011000110111110",
        "10111110100111100011011101111010",
        "10111110101001101011000011011111",
        "10111110101011110001110101000100",
        "10111110101101110111110000000001",
        "10111110101111111100110001101111",
        "10111110110010000000110111101001",
        "10111110110100000011111111001001",
        "10111110110110000110000101101100",
        "10111110111000000111001000101111",
        "10111110111010000111000101110001",
        "10111110111100000101111010010100",
        "10111110111110000011100011110111",
        "10111111000000000000000000000000",
        "10111111000000111101100110001001",
        "10111111000001111010100011001010",
        "10111111000010110110110101110111",
        "10111111000011110010011101000100",
        "10111111000100101101010111101000",
        "10111111000101100111100100011000",
        "10111111000110100001000010001101",
        "10111111000111011001101111111110",
        "10111111001000010001101100100100",
        "10111111001001001000110110111011",
        "10111111001001111111001101111100",
        "10111111001010110100110000100101",
        "10111111001011101001011101110010",
        "10111111001100011101010100100010",
        "10111111001101010000010011110011",
        "10111111001110000010011010100111",
        "10111111001110110011100111111111",
        "10111111001111100011111010111101",
        "10111111010000010011010010100110",
        "10111111010001000001101101111101",
        "10111111010001101111001100001010",
        "10111111010010011011101100010011",
        "10111111010011000111001101100000",
        "10111111010011110001101110111101",
        "10111111010100011011001111110011",
        "10111111010101000011101111001110",
        "10111111010101101011001100011101",
        "10111111010110010001100110101110",
        "10111111010110110110111101010001",
        "10111111010111011011001111010111",
        "10111111010111111110011100010100",
        "10111111011000100000100011011010",
        "10111111011001000001100100000001",
        "10111111011001100001011101011110",
        "10111111011010000000001111001010",
        "10111111011010011101111000011101",
        "10111111011010111010011000110101",
        "10111111011011010101101111101100",
        "10111111011011101111111100100000",
        "10111111011100001000111110110010",
        "10111111011100100000110110000001",
        "10111111011100110111100001110001",
        "10111111011101001101000001100011",
        "10111111011101100001010100111111",
        "10111111011101110100011011101010",
        "10111111011110000110010101001101",
        "10111111011110010111000001010001",
        "10111111011110100110011111100010",
        "10111111011110110100101111101011",
        "10111111011111000001110001011100",
        "10111111011111001101100100100101",
        "10111111011111011000001000110101",
        "10111111011111100001011110000001",
        "10111111011111101001100011111101",
        "10111111011111110000011010011110",
        "10111111011111110110000001011100",
        "10111111011111111010011000101111",
        "10111111011111111101100000010100",
        "10111111011111111111011000000101",
        "10111111100000000000000000000000",
        "10111111011111111111011000000101",
        "10111111011111111101100000010100",
        "10111111011111111010011000101111",
        "10111111011111110110000001011100",
        "10111111011111110000011010011110",
        "10111111011111101001100011111101",
        "10111111011111100001011110000001",
        "10111111011111011000001000110101",
        "10111111011111001101100100100101",
        "10111111011111000001110001011100",
        "10111111011110110100101111101011",
        "10111111011110100110011111100010",
        "10111111011110010111000001010001",
        "10111111011110000110010101001101",
        "10111111011101110100011011101010",
        "10111111011101100001010100111111",
        "10111111011101001101000001100011",
        "10111111011100110111100001110001",
        "10111111011100100000110110000001",
        "10111111011100001000111110110010",
        "10111111011011101111111100100000",
        "10111111011011010101101111101100",
        "10111111011010111010011000110101",
        "10111111011010011101111000011101",
        "10111111011010000000001111001010",
        "10111111011001100001011101011110",
        "10111111011001000001100100000001",
        "10111111011000100000100011011010",
        "10111111010111111110011100010100",
        "10111111010111011011001111010111",
        "10111111010110110110111101010001",
        "10111111010110010001100110101110",
        "10111111010101101011001100011101",
        "10111111010101000011101111001110",
        "10111111010100011011001111110011",
        "10111111010011110001101110111101",
        "10111111010011000111001101100000",
        "10111111010010011011101100010011",
        "10111111010001101111001100001010",
        "10111111010001000001101101111101",
        "10111111010000010011010010100110",
        "10111111001111100011111010111101",
        "10111111001110110011100111111111",
        "10111111001110000010011010100111",
        "10111111001101010000010011110011",
        "10111111001100011101010100100010",
        "10111111001011101001011101110010",
        "10111111001010110100110000100101",
        "10111111001001111111001101111100",
        "10111111001001001000110110111011",
        "10111111001000010001101100100100",
        "10111111000111011001101111111110",
        "10111111000110100001000010001101",
        "10111111000101100111100100011000",
        "10111111000100101101010111101000",
        "10111111000011110010011101000100",
        "10111111000010110110110101110111",
        "10111111000001111010100011001010",
        "10111111000000111101100110001001",
        "10111111000000000000000000000000",
        "10111110111110000011100011110111",
        "10111110111100000101111010010100",
        "10111110111010000111000101110001",
        "10111110111000000111001000101111",
        "10111110110110000110000101101100",
        "10111110110100000011111111001001",
        "10111110110010000000110111101001",
        "10111110101111111100110001101111",
        "10111110101101110111110000000001",
        "10111110101011110001110101000100",
        "10111110101001101011000011011111",
        "10111110100111100011011101111010",
        "10111110100101011011000110111110",
        "10111110100011010010000001010111",
        "10111110100001001000001111101110",
        "10111110011101111011101001100000",
        "10111110011001100101100110010010",
        "10111110010101001110011011001101",
        "10111110010000110110001101101111",
        "10111110001100011101000011010100",
        "10111110001000000011000001011011",
        "10111110000011101000001101100101",
        "10111101111110011001011010100010",
        "10111101110101100001001100000101",
        "10111101101100100111111010110110",
        "10111101100011101101110001111011",
        "10111101010101100101111000111010",
        "10111101000011101111001011000110",
        "10111100100011101111100001011001"
    );

    -- The lookup table for cosine
    CONSTANT cos_table : t_trig_table := (
        "00111111100000000000000000000000",
        "00111111011111111111011000000101",
        "00111111011111111101100000010100",
        "00111111011111111010011000101111",
        "00111111011111110110000001011100",
        "00111111011111110000011010011110",
        "00111111011111101001100011111101",
        "00111111011111100001011110000001",
        "00111111011111011000001000110101",
        "00111111011111001101100100100101",
        "00111111011111000001110001011100",
        "00111111011110110100101111101011",
        "00111111011110100110011111100010",
        "00111111011110010111000001010001",
        "00111111011110000110010101001101",
        "00111111011101110100011011101010",
        "00111111011101100001010100111111",
        "00111111011101001101000001100011",
        "00111111011100110111100001110001",
        "00111111011100100000110110000001",
        "00111111011100001000111110110010",
        "00111111011011101111111100100000",
        "00111111011011010101101111101100",
        "00111111011010111010011000110101",
        "00111111011010011101111000011101",
        "00111111011010000000001111001010",
        "00111111011001100001011101011110",
        "00111111011001000001100100000001",
        "00111111011000100000100011011010",
        "00111111010111111110011100010100",
        "00111111010111011011001111010111",
        "00111111010110110110111101010001",
        "00111111010110010001100110101110",
        "00111111010101101011001100011101",
        "00111111010101000011101111001110",
        "00111111010100011011001111110011",
        "00111111010011110001101110111101",
        "00111111010011000111001101100000",
        "00111111010010011011101100010011",
        "00111111010001101111001100001010",
        "00111111010001000001101101111101",
        "00111111010000010011010010100110",
        "00111111001111100011111010111101",
        "00111111001110110011100111111111",
        "00111111001110000010011010100111",
        "00111111001101010000010011110011",
        "00111111001100011101010100100010",
        "00111111001011101001011101110010",
        "00111111001010110100110000100101",
        "00111111001001111111001101111100",
        "00111111001001001000110110111011",
        "00111111001000010001101100100100",
        "00111111000111011001101111111110",
        "00111111000110100001000010001101",
        "00111111000101100111100100011000",
        "00111111000100101101010111101000",
        "00111111000011110010011101000100",
        "00111111000010110110110101110111",
        "00111111000001111010100011001010",
        "00111111000000111101100110001001",
        "00111111000000000000000000000000",
        "00111110111110000011100011110111",
        "00111110111100000101111010010100",
        "00111110111010000111000101110001",
        "00111110111000000111001000101111",
        "00111110110110000110000101101100",
        "00111110110100000011111111001001",
        "00111110110010000000110111101001",
        "00111110101111111100110001101111",
        "00111110101101110111110000000001",
        "00111110101011110001110101000100",
        "00111110101001101011000011011111",
        "00111110100111100011011101111010",
        "00111110100101011011000110111110",
        "00111110100011010010000001010111",
        "00111110100001001000001111101110",
        "00111110011101111011101001100000",
        "00111110011001100101100110010010",
        "00111110010101001110011011001101",
        "00111110010000110110001101101111",
        "00111110001100011101000011010100",
        "00111110001000000011000001011011",
        "00111110000011101000001101100101",
        "00111101111110011001011010100010",
        "00111101110101100001001100000101",
        "00111101101100100111111010110110",
        "00111101100011101101110001111011",
        "00111101010101100101111000111010",
        "00111101000011101111001011000110",
        "00111100100011101111100001011001",
        "00100100100011010011000100110010",
        "10111100100011101111100001011001",
        "10111101000011101111001011000110",
        "10111101010101100101111000111010",
        "10111101100011101101110001111011",
        "10111101101100100111111010110110",
        "10111101110101100001001100000101",
        "10111101111110011001011010100010",
        "10111110000011101000001101100101",
        "10111110001000000011000001011011",
        "10111110001100011101000011010100",
        "10111110010000110110001101101111",
        "10111110010101001110011011001101",
        "10111110011001100101100110010010",
        "10111110011101111011101001100000",
        "10111110100001001000001111101110",
        "10111110100011010010000001010111",
        "10111110100101011011000110111110",
        "10111110100111100011011101111010",
        "10111110101001101011000011011111",
        "10111110101011110001110101000100",
        "10111110101101110111110000000001",
        "10111110101111111100110001101111",
        "10111110110010000000110111101001",
        "10111110110100000011111111001001",
        "10111110110110000110000101101100",
        "10111110111000000111001000101111",
        "10111110111010000111000101110001",
        "10111110111100000101111010010100",
        "10111110111110000011100011110111",
        "10111111000000000000000000000000",
        "10111111000000111101100110001001",
        "10111111000001111010100011001010",
        "10111111000010110110110101110111",
        "10111111000011110010011101000100",
        "10111111000100101101010111101000",
        "10111111000101100111100100011000",
        "10111111000110100001000010001101",
        "10111111000111011001101111111110",
        "10111111001000010001101100100100",
        "10111111001001001000110110111011",
        "10111111001001111111001101111100",
        "10111111001010110100110000100101",
        "10111111001011101001011101110010",
        "10111111001100011101010100100010",
        "10111111001101010000010011110011",
        "10111111001110000010011010100111",
        "10111111001110110011100111111111",
        "10111111001111100011111010111101",
        "10111111010000010011010010100110",
        "10111111010001000001101101111101",
        "10111111010001101111001100001010",
        "10111111010010011011101100010011",
        "10111111010011000111001101100000",
        "10111111010011110001101110111101",
        "10111111010100011011001111110011",
        "10111111010101000011101111001110",
        "10111111010101101011001100011101",
        "10111111010110010001100110101110",
        "10111111010110110110111101010001",
        "10111111010111011011001111010111",
        "10111111010111111110011100010100",
        "10111111011000100000100011011010",
        "10111111011001000001100100000001",
        "10111111011001100001011101011110",
        "10111111011010000000001111001010",
        "10111111011010011101111000011101",
        "10111111011010111010011000110101",
        "10111111011011010101101111101100",
        "10111111011011101111111100100000",
        "10111111011100001000111110110010",
        "10111111011100100000110110000001",
        "10111111011100110111100001110001",
        "10111111011101001101000001100011",
        "10111111011101100001010100111111",
        "10111111011101110100011011101010",
        "10111111011110000110010101001101",
        "10111111011110010111000001010001",
        "10111111011110100110011111100010",
        "10111111011110110100101111101011",
        "10111111011111000001110001011100",
        "10111111011111001101100100100101",
        "10111111011111011000001000110101",
        "10111111011111100001011110000001",
        "10111111011111101001100011111101",
        "10111111011111110000011010011110",
        "10111111011111110110000001011100",
        "10111111011111111010011000101111",
        "10111111011111111101100000010100",
        "10111111011111111111011000000101",
        "10111111100000000000000000000000",
        "10111111011111111111011000000101",
        "10111111011111111101100000010100",
        "10111111011111111010011000101111",
        "10111111011111110110000001011100",
        "10111111011111110000011010011110",
        "10111111011111101001100011111101",
        "10111111011111100001011110000001",
        "10111111011111011000001000110101",
        "10111111011111001101100100100101",
        "10111111011111000001110001011100",
        "10111111011110110100101111101011",
        "10111111011110100110011111100010",
        "10111111011110010111000001010001",
        "10111111011110000110010101001101",
        "10111111011101110100011011101010",
        "10111111011101100001010100111111",
        "10111111011101001101000001100011",
        "10111111011100110111100001110001",
        "10111111011100100000110110000001",
        "10111111011100001000111110110010",
        "10111111011011101111111100100000",
        "10111111011011010101101111101100",
        "10111111011010111010011000110101",
        "10111111011010011101111000011101",
        "10111111011010000000001111001010",
        "10111111011001100001011101011110",
        "10111111011001000001100100000001",
        "10111111011000100000100011011010",
        "10111111010111111110011100010100",
        "10111111010111011011001111010111",
        "10111111010110110110111101010001",
        "10111111010110010001100110101110",
        "10111111010101101011001100011101",
        "10111111010101000011101111001110",
        "10111111010100011011001111110011",
        "10111111010011110001101110111101",
        "10111111010011000111001101100000",
        "10111111010010011011101100010011",
        "10111111010001101111001100001010",
        "10111111010001000001101101111101",
        "10111111010000010011010010100110",
        "10111111001111100011111010111101",
        "10111111001110110011100111111111",
        "10111111001110000010011010100111",
        "10111111001101010000010011110011",
        "10111111001100011101010100100010",
        "10111111001011101001011101110010",
        "10111111001010110100110000100101",
        "10111111001001111111001101111100",
        "10111111001001001000110110111011",
        "10111111001000010001101100100100",
        "10111111000111011001101111111110",
        "10111111000110100001000010001101",
        "10111111000101100111100100011000",
        "10111111000100101101010111101000",
        "10111111000011110010011101000100",
        "10111111000010110110110101110111",
        "10111111000001111010100011001010",
        "10111111000000111101100110001001",
        "10111111000000000000000000000000",
        "10111110111110000011100011110111",
        "10111110111100000101111010010100",
        "10111110111010000111000101110001",
        "10111110111000000111001000101111",
        "10111110110110000110000101101100",
        "10111110110100000011111111001001",
        "10111110110010000000110111101001",
        "10111110101111111100110001101111",
        "10111110101101110111110000000001",
        "10111110101011110001110101000100",
        "10111110101001101011000011011111",
        "10111110100111100011011101111010",
        "10111110100101011011000110111110",
        "10111110100011010010000001010111",
        "10111110100001001000001111101110",
        "10111110011101111011101001100000",
        "10111110011001100101100110010010",
        "10111110010101001110011011001101",
        "10111110010000110110001101101111",
        "10111110001100011101000011010100",
        "10111110001000000011000001011011",
        "10111110000011101000001101100101",
        "10111101111110011001011010100010",
        "10111101110101100001001100000101",
        "10111101101100100111111010110110",
        "10111101100011101101110001111011",
        "10111101010101100101111000111010",
        "10111101000011101111001011000110",
        "10111100100011101111100001011001",
        "10100101010100111100100111001010",
        "00111100100011101111100001011001",
        "00111101000011101111001011000110",
        "00111101010101100101111000111010",
        "00111101100011101101110001111011",
        "00111101101100100111111010110110",
        "00111101110101100001001100000101",
        "00111101111110011001011010100010",
        "00111110000011101000001101100101",
        "00111110001000000011000001011011",
        "00111110001100011101000011010100",
        "00111110010000110110001101101111",
        "00111110010101001110011011001101",
        "00111110011001100101100110010010",
        "00111110011101111011101001100000",
        "00111110100001001000001111101110",
        "00111110100011010010000001010111",
        "00111110100101011011000110111110",
        "00111110100111100011011101111010",
        "00111110101001101011000011011111",
        "00111110101011110001110101000100",
        "00111110101101110111110000000001",
        "00111110101111111100110001101111",
        "00111110110010000000110111101001",
        "00111110110100000011111111001001",
        "00111110110110000110000101101100",
        "00111110111000000111001000101111",
        "00111110111010000111000101110001",
        "00111110111100000101111010010100",
        "00111110111110000011100011110111",
        "00111111000000000000000000000000",
        "00111111000000111101100110001001",
        "00111111000001111010100011001010",
        "00111111000010110110110101110111",
        "00111111000011110010011101000100",
        "00111111000100101101010111101000",
        "00111111000101100111100100011000",
        "00111111000110100001000010001101",
        "00111111000111011001101111111110",
        "00111111001000010001101100100100",
        "00111111001001001000110110111011",
        "00111111001001111111001101111100",
        "00111111001010110100110000100101",
        "00111111001011101001011101110010",
        "00111111001100011101010100100010",
        "00111111001101010000010011110011",
        "00111111001110000010011010100111",
        "00111111001110110011100111111111",
        "00111111001111100011111010111101",
        "00111111010000010011010010100110",
        "00111111010001000001101101111101",
        "00111111010001101111001100001010",
        "00111111010010011011101100010011",
        "00111111010011000111001101100000",
        "00111111010011110001101110111101",
        "00111111010100011011001111110011",
        "00111111010101000011101111001110",
        "00111111010101101011001100011101",
        "00111111010110010001100110101110",
        "00111111010110110110111101010001",
        "00111111010111011011001111010111",
        "00111111010111111110011100010100",
        "00111111011000100000100011011010",
        "00111111011001000001100100000001",
        "00111111011001100001011101011110",
        "00111111011010000000001111001010",
        "00111111011010011101111000011101",
        "00111111011010111010011000110101",
        "00111111011011010101101111101100",
        "00111111011011101111111100100000",
        "00111111011100001000111110110010",
        "00111111011100100000110110000001",
        "00111111011100110111100001110001",
        "00111111011101001101000001100011",
        "00111111011101100001010100111111",
        "00111111011101110100011011101010",
        "00111111011110000110010101001101",
        "00111111011110010111000001010001",
        "00111111011110100110011111100010",
        "00111111011110110100101111101011",
        "00111111011111000001110001011100",
        "00111111011111001101100100100101",
        "00111111011111011000001000110101",
        "00111111011111100001011110000001",
        "00111111011111101001100011111101",
        "00111111011111110000011010011110",
        "00111111011111110110000001011100",
        "00111111011111111010011000101111",
        "00111111011111111101100000010100",
        "00111111011111111111011000000101"
    );

    -- -- The lookup talble for tangent
    -- CONSTANT tan_table : tan_table_type := (
    --     "00000000000000000000000000000000",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011010011010000001010010110100",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101",
    --     "10100101000011010011000100110010",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011001100110101011100001111000",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101"
    -- );

    -- The function of sin that returns a float32
    -- It will also normalize the input to [0, 359]
    FUNCTION sin_float32 (x : INTEGER) RETURN float32;

    -- The function of cos that returns a float32
    -- It will also normalize the input to [0, 359]
    FUNCTION cos_float32 (x : INTEGER) RETURN float32;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------
    TYPE vec2_int IS ARRAY (0 TO 1) OF INTEGER;
    TYPE vec3_int IS ARRAY (0 TO 2) OF INTEGER;
    TYPE vec4_int IS ARRAY (0 TO 3) OF INTEGER;

    TYPE vec2_float IS ARRAY (0 TO 1) OF float32;
    TYPE vec3_float IS ARRAY (0 TO 2) OF float32;
    TYPE vec4_float IS ARRAY (0 TO 3) OF float32;

    TYPE mat3_int IS ARRAY (0 TO 2) OF vec3_int;
    TYPE mat4_int IS ARRAY (0 TO 3) OF vec4_int;

    TYPE mat3_float IS ARRAY (0 TO 2) OF vec3_float;
    TYPE mat4_float IS ARRAY (0 TO 3) OF vec4_float;

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int;

    -- --------------------------------------------------------------------
    -- FLOAT type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_float) RETURN vec2_float;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_float) RETURN vec2_float;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_float) RETURN float32;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_float; b : float32) RETURN vec2_float;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_float; b : float32) RETURN vec2_float;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_float) RETURN vec3_float;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_float) RETURN vec3_float;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_float) RETURN float32;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_float; b : float32) RETURN vec3_float;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_float; b : float32) RETURN vec3_float;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_float) RETURN vec4_float;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_float) RETURN vec4_float;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_float) RETURN float32;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_float; b : float32) RETURN vec4_float;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_float; b : float32) RETURN vec4_float;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_float; b : vec3_float) RETURN vec3_float;

    -- -- Normalize the vector
    -- FUNCTION normalize (a : vec2_float) RETURN vec2_float;
    -- FUNCTION normalize (a : vec3_float) RETURN vec3_float;
    -- FUNCTION normalize (a : vec4_float) RETURN vec4_float;

    -- -- Length of the vector
    -- FUNCTION length (a : vec2_float) RETURN float32;
    -- FUNCTION length (a : vec3_float) RETURN float32;
    -- FUNCTION length (a : vec4_float) RETURN float32;

    -- -- Distance between two vectors
    -- FUNCTION distance (a, b : vec2_float) RETURN float32;
    -- FUNCTION distance (a, b : vec3_float) RETURN float32;
    -- FUNCTION distance (a, b : vec4_float) RETURN float32;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_float; b : vec3_float) RETURN vec3_float;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_float; b : vec4_float) RETURN vec4_float;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_float) RETURN vec2_int;
    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int;
    FUNCTION to_vec3_int (a : vec3_float) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec4_int) RETURN vec3_int;
    FUNCTION to_vec4_int (a : vec4_float) RETURN vec4_int;
    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int;
    FUNCTION to_mat3_int (a : mat3_float) RETURN mat3_int;
    FUNCTION to_mat4_int (a : mat4_float) RETURN mat4_int;
    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int;

    -- To float type
    FUNCTION to_vec2_float (a : vec2_int) RETURN vec2_float;
    FUNCTION to_vec2_float (a : vec3_float) RETURN vec2_float;
    FUNCTION to_vec3_float (a : vec3_int) RETURN vec3_float;
    FUNCTION to_vec3_float (a : vec2_float; w : float32) RETURN vec3_float;
    FUNCTION to_vec3_float (a : vec4_float) RETURN vec3_float;
    FUNCTION to_vec4_float (a : vec4_int) RETURN vec4_float;
    FUNCTION to_vec4_float (a : vec3_float; w : float32) RETURN vec4_float;
    FUNCTION to_mat3_float (a : mat3_int) RETURN mat3_float;
    FUNCTION to_mat4_float (a : mat4_int) RETURN mat4_float;
    FUNCTION to_mat4_float (a : mat3_float) RETURN mat4_float;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- Perspective Projection
    FUNCTION perspective (left, right, bottom, top, near, far : INTEGER) RETURN mat4_float;
    -- Orthographic Projection
    FUNCTION orthographic (left, right, bottom, top, near, far : INTEGER) RETURN mat4_float;
    -- Look at function for the view matrix
    -- FUNCTION look_at (eye, at, up : vec3_int) RETURN mat4_float;

    -- --------------------------------------------------------------------
    --                Constants
    -- --------------------------------------------------------------------
    CONSTANT float32_zero : float32 := "00000000000000000000000000000000";
    CONSTANT float32_one : float32 := "00111111100000000000000000000000";

    CONSTANT identity_mat3_int : mat3_int := ((1, 0, 0), (0, 1, 0), (0, 0, 1));
    CONSTANT identity_mat4_int : mat4_int := ((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1));
    CONSTANT identity_mat3_float : mat3_float := (
    (float32_one, float32_zero, float32_zero),
        (float32_zero, float32_one, float32_zero),
        (float32_zero, float32_zero, float32_one)
    );
    CONSTANT identity_mat4_float : mat4_float := (
    (float32_one, float32_zero, float32_zero, float32_zero),
        (float32_zero, float32_one, float32_zero, float32_zero),
        (float32_zero, float32_zero, float32_one, float32_zero),
        (float32_zero, float32_zero, float32_zero, float32_one)
    );
    CONSTANT default_perspective_mat4_float : mat4_float := (
    ("00111111110111011011001111010111", float32_zero, float32_one, float32_zero),
        (float32_zero, "00111111110111011011001111010111", "10111111100000000000000000000000", float32_zero),
        (float32_zero, float32_zero, "00111111100000000000000001010100", "10111111100000000000000000000000"),
        (float32_zero, float32_zero, "10111101110011001101001000001011", float32_zero)
    );
    CONSTANT look_forward_mat4_float : mat4_float := (
    (float32_one, float32_zero, float32_zero, float32_zero),
        (float32_zero, float32_one, float32_zero, float32_zero),
        (float32_zero, float32_zero, float32_one, float32_zero),
        (float32_zero, float32_zero, float32_zero, float32_one)
    );

    -- --------------------------------------------------------------------
    --               Transformation
    -- --------------------------------------------------------------------
    -- Translation
    FUNCTION translation_mat4_float (displacement : vec3_int) RETURN mat4_float;
    -- Rotation
    FUNCTION rotation_mat4_float (euler : vec3_int) RETURN mat4_float;
    -- Scaling
    FUNCTION scaling_mat4_float (scale : vec3_int) RETURN mat4_float;

END PACKAGE;

PACKAGE BODY math3D_pkg IS
    -- --------------------------------------------------------------------
    --            Trigonometric Func
    -- --------------------------------------------------------------------
    FUNCTION sin_float32 (x : INTEGER) RETURN float32 IS
    BEGIN
        RETURN sin_table(x MOD 360);
    END sin_float32;

    FUNCTION cos_float32 (x : INTEGER) RETURN float32 IS
    BEGIN
        RETURN cos_table(x MOD 360);
    END cos_float32;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        result(3) := a(3) * b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        result(3) := a(3) / b;
        RETURN result;
    END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- FLOAT type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_float; b : float32) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_float; b : float32) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_float; b : float32) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_float; b : float32) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_float; b : float32) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        result(3) := a(3) * b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_float; b : float32) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        result(3) := a(3) / b;
        RETURN result;
    END FUNCTION;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_float; b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := (a(1) * b(2)) - (a(2) * b(1));
        result(1) := (a(2) * b(0)) - (a(0) * b(2));
        result(2) := (a(0) * b(1)) - (a(1) * b(0));
        RETURN result;
    END FUNCTION;

    -- -- Vector Length
    -- FUNCTION length (a : vec2_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt(1);
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec3_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec4_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)) + (a(3) * a(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Distance
    -- FUNCTION distance (a, b : vec2_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec3_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec4_float) RETURN float32 IS
    --     VARIABLE result : float32;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)) + (a(3) - b(3)) * (a(3) - b(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Nomalization
    -- FUNCTION normalize (a : vec2_float) RETURN vec2_float IS
    --     VARIABLE result : vec2_float;
    --     VARIABLE length : float32;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec3_float) RETURN vec3_float IS
    --     VARIABLE result : vec3_float;
    --     VARIABLE length : float32;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec4_float) RETURN vec4_float IS
    --     VARIABLE result : vec4_float;
    --     VARIABLE length : float32;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2) + a(3) * a(3));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     result(3) := a(3) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := a(0)(0) + b(0)(0);
        result(0)(1) := a(0)(1) + b(0)(1);
        result(0)(2) := a(0)(2) + b(0)(2);

        result(1)(0) := a(1)(0) + b(1)(0);
        result(1)(1) := a(1)(1) + b(1)(1);
        result(1)(2) := a(1)(2) + b(1)(2);

        result(2)(0) := a(2)(0) + b(2)(0);
        result(2)(1) := a(2)(1) + b(2)(1);
        result(2)(2) := a(2)(2) + b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := a(0)(0) - b(0)(0);
        result(0)(1) := a(0)(1) - b(0)(1);
        result(0)(2) := a(0)(2) - b(0)(2);

        result(1)(0) := a(1)(0) - b(1)(0);
        result(1)(1) := a(1)(1) - b(1)(1);
        result(1)(2) := a(1)(2) - b(1)(2);

        result(2)(0) := a(2)(0) - b(2)(0);
        result(2)(1) := a(2)(1) - b(2)(1);
        result(2)(2) := a(2)(2) - b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_float; b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_float; b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_float) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec3_float) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int(a : vec4_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec4_float) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        result(3) := to_integer(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_int (a : mat3_float) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat4_float) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));
        result(0)(3) := to_integer(a(0)(3));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));
        result(1)(3) := to_integer(a(1)(3));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        result(2)(3) := to_integer(a(2)(3));

        result(3)(0) := to_integer(a(3)(0));
        result(3)(1) := to_integer(a(3)(1));
        result(3)(2) := to_integer(a(3)(2));
        result(3)(3) := to_integer(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := 0;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := 0;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := 0;

        result(3)(0) := 0;
        result(3)(1) := 0;
        result(3)(2) := 0;
        result(3)(3) := 1;
        RETURN result;
    END FUNCTION;

    -- To float type
    FUNCTION to_vec2_float (a : vec2_int) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := to_float(a(0), 8, 23);
        result(1) := to_float(a(1), 8, 23);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_float (a : vec3_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec3_int) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := to_float(a(0), 8, 23);
        result(1) := to_float(a(1), 8, 23);
        result(2) := to_float(a(2), 8, 23);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec2_float; w : float32) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec4_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_float (a : vec4_int) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := to_float(a(0), 8, 23);
        result(1) := to_float(a(1), 8, 23);
        result(2) := to_float(a(2), 8, 23);
        result(3) := to_float(a(3), 8, 23);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_float (a : vec3_float; w : float32) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_float (a : mat3_int) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := to_float(a(0)(0), 8, 23);
        result(0)(1) := to_float(a(0)(1), 8, 23);
        result(0)(2) := to_float(a(0)(2), 8, 23);

        result(1)(0) := to_float(a(1)(0), 8, 23);
        result(1)(1) := to_float(a(1)(1), 8, 23);
        result(1)(2) := to_float(a(1)(2), 8, 23);

        result(2)(0) := to_float(a(2)(0), 8, 23);
        result(2)(1) := to_float(a(2)(1), 8, 23);
        result(2)(2) := to_float(a(2)(2), 8, 23);
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_float (a : mat4_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0)(0) := to_float(a(0)(0), 8, 23);
        result(0)(1) := to_float(a(0)(1), 8, 23);
        result(0)(2) := to_float(a(0)(2), 8, 23);
        result(0)(3) := to_float(a(0)(3), 8, 23);

        result(1)(0) := to_float(a(1)(0), 8, 23);
        result(1)(1) := to_float(a(1)(1), 8, 23);
        result(1)(2) := to_float(a(1)(2), 8, 23);
        result(1)(3) := to_float(a(1)(3), 8, 23);

        result(2)(0) := to_float(a(2)(0), 8, 23);
        result(2)(1) := to_float(a(2)(1), 8, 23);
        result(2)(2) := to_float(a(2)(2), 8, 23);
        result(2)(3) := to_float(a(2)(3), 8, 23);

        result(3)(0) := to_float(a(3)(0), 8, 23);
        result(3)(1) := to_float(a(3)(1), 8, 23);
        result(3)(2) := to_float(a(3)(2), 8, 23);
        result(3)(3) := to_float(a(3)(3), 8, 23);
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_float (a : mat3_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := float32_zero;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := float32_zero;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := float32_zero;

        result(3)(0) := float32_zero;
        result(3)(1) := float32_zero;
        result(3)(2) := float32_zero;
        result(3)(3) := float32_one;
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --                Transform
    -- --------------------------------------------------------------------
    -- Translate
    FUNCTION translation_mat4_float (displacement : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result := identity_mat4_float;
        result(0)(3) := to_float(displacement(0), 8, 23);
        result(1)(3) := to_float(displacement(1), 8, 23);
        result(2)(3) := to_float(displacement(2), 8, 23);
        RETURN result;
    END FUNCTION;

    -- Rotation
    FUNCTION rotation_mat4_float (euler : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE a, b, c, d, e, f, g, h, i : float32;
        VARIABLE cos_x, cos_y, cos_z, sin_x, sin_y, sin_z : float32;
    BEGIN
        result := identity_mat4_float;

        cos_x := cos_float32(euler(0));
        cos_y := cos_float32(euler(1));
        cos_z := cos_float32(euler(2));
        sin_x := sin_float32(euler(0));
        sin_y := sin_float32(euler(1));
        sin_z := sin_float32(euler(2));

        a := cos_y * cos_z;
        b := cos_y * sin_z;
        c := - sin_y;
        d := sin_x * sin_y * cos_z - cos_x * sin_z;
        e := sin_x * sin_y * sin_z + cos_x * cos_z;
        f := sin_x * cos_y;
        g := cos_x * sin_y * cos_z + sin_x * sin_z;
        h := cos_x * sin_y * sin_z - sin_x * cos_z;
        i := cos_x * cos_y;

        result(0)(0) := a;
        result(0)(1) := b;
        result(0)(2) := c;
        result(1)(0) := d;
        result(1)(1) := e;
        result(1)(2) := f;
        result(2)(0) := g;
        result(2)(1) := h;
        result(2)(2) := i;

        RETURN result;
    END FUNCTION;

    -- Scaling
    FUNCTION scaling_mat4_float (scale : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result := identity_mat4_float;
        result(0)(0) := to_float(scale(0), 8, 23);
        result(1)(1) := to_float(scale(1), 8, 23);
        result(2)(2) := to_float(scale(2), 8, 23);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- Perspective Projection
    FUNCTION perspective(left, right, bottom, top, near, far : INTEGER) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE l, r, b, t, n, f : float32;
    BEGIN
        l := to_float(left, 8, 23);
        r := to_float(right, 8, 23);
        b := to_float(bottom, 8, 23);
        t := to_float(top, 8, 23);
        n := to_float(near, 8, 23);
        f := to_float(far, 8, 23);

        result(0)(0) := (n * 2) / (r - l);
        result(0)(1) := to_float(0.0, 8, 23);
        result(0)(2) := (r + l) / (r - l);
        result(0)(3) := to_float(0.0, 8, 23);

        result(1)(0) := to_float(0.0, 8, 23);
        result(1)(1) := (2 * n) / (t - b);
        result(1)(2) := (t + b) / (t - b);
        result(1)(3) := to_float(0.0, 8, 23);

        result(2)(0) := to_float(0.0, 8, 23);
        result(2)(1) := to_float(0.0, 8, 23);
        result(2)(2) := - 1.0 * (f + n) / (f - n);
        result(2)(3) := - 1.0 * (2 * f * n) / (f - n);

        result(3)(0) := to_float(0.0, 8, 23);
        result(3)(1) := to_float(0.0, 8, 23);
        result(3)(2) := to_float(-1.0, 8, 23);
        result(3)(3) := to_float(0.0, 8, 23);

        RETURN result;
    END FUNCTION;

    -- Orthographic Projection
    FUNCTION orthographic(left, right, bottom, top, near, far : INTEGER) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE l, r, b, t, n, f : float32;
    BEGIN
        l := to_float(left, 8, 23);
        r := to_float(right, 8, 23);
        b := to_float(bottom, 8, 23);
        t := to_float(top, 8, 23);
        n := to_float(near, 8, 23);
        f := to_float(far, 8, 23);

        result(0)(0) := to_float(2.0, 8, 23) / (r - l);
        result(0)(1) := to_float(0.0, 8, 23);
        result(0)(2) := to_float(0.0, 8, 23);
        result(0)(3) := to_float(-1.0, 8, 23) * (r + l) / (r - l);

        result(1)(0) := to_float(0.0, 8, 23);
        result(1)(1) := to_float(2.0, 8, 23) / (t - b);
        result(1)(2) := to_float(0.0, 8, 23);
        result(1)(3) := to_float(-1.0, 8, 23) * (t + b) / (t - b);

        result(2)(0) := to_float(0.0, 8, 23);
        result(2)(1) := to_float(0.0, 8, 23);
        result(2)(2) := to_float(-2.0, 8, 23) / (f - n);
        result(2)(3) := to_float(-1.0, 8, 23) * (f + n) / (f - n);

        result(3)(0) := to_float(0.0, 8, 23);
        result(3)(1) := to_float(0.0, 8, 23);
        result(3)(2) := to_float(0.0, 8, 23);
        result(3)(3) := to_float(1.0, 8, 23);

        RETURN result;
    END FUNCTION;

    -- -- LookAt
    -- FUNCTION look_at(eye, at, up : vec3_int) RETURN mat4_float IS
    --     VARIABLE result : mat4_float;
    --     VARIABLE f, s, u : vec3_float;
    -- BEGIN
    --     f := normalize(to_vec3_float(at - eye));
    --     s := normalize(cross(f, to_vec3_float(up)));
    --     u := cross(s, f);

    --     result(0)(0) := s(0);
    --     result(0)(1) := u(0);
    --     result(0)(2) := - f(0);
    --     result(0)(3) := float32_zero;

    --     result(1)(0) := s(1);
    --     result(1)(1) := u(1);
    --     result(1)(2) := - f(1);
    --     result(1)(3) := float32_zero;

    --     result(2)(0) := s(2);
    --     result(2)(1) := u(2);
    --     result(2)(2) := - f(2);
    --     result(2)(3) := float32_zero;

    --     result(3)(0) := float32_zero;
    --     result(3)(1) := float32_zero;
    --     result(3)(2) := float32_zero;
    --     result(3)(3) := float32_one;

    --     RETURN result;
    -- END FUNCTION;
END PACKAGE BODY;