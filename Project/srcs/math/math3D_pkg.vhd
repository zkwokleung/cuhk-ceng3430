LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE work.my_float_pkg.ALL;

PACKAGE math3D_pkg IS
    -- --------------------------------------------------------------------
    --               Trigonometry
    -- -------------------------------------------------------------------- 
    TYPE t_trig_table IS ARRAY (0 TO 359) OF INTEGER;

    -- The lookup table for sine
    CONSTANT sin_table : t_trig_table :=
    (
    0,
    1,
    3,
    5,
    6,
    8,
    10,
    12,
    13,
    15,
    17,
    19,
    20,
    22,
    24,
    25,
    27,
    29,
    30,
    32,
    34,
    35,
    37,
    39,
    40,
    42,
    43,
    45,
    46,
    48,
    49,
    51,
    52,
    54,
    55,
    57,
    58,
    60,
    61,
    62,
    64,
    65,
    66,
    68,
    69,
    70,
    71,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    89,
    90,
    91,
    92,
    92,
    93,
    93,
    94,
    95,
    95,
    96,
    96,
    97,
    97,
    97,
    98,
    98,
    98,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    100,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    98,
    98,
    98,
    97,
    97,
    97,
    96,
    96,
    95,
    95,
    94,
    93,
    93,
    92,
    92,
    91,
    90,
    89,
    89,
    88,
    87,
    86,
    85,
    84,
    83,
    82,
    81,
    80,
    79,
    78,
    77,
    76,
    75,
    74,
    73,
    71,
    70,
    69,
    68,
    66,
    65,
    64,
    62,
    61,
    60,
    58,
    57,
    55,
    54,
    52,
    51,
    49,
    48,
    46,
    45,
    43,
    42,
    40,
    39,
    37,
    35,
    34,
    32,
    30,
    29,
    27,
    25,
    24,
    22,
    20,
    19,
    17,
    15,
    13,
    12,
    10,
    8,
    6,
    5,
    3,
    1,
    0,
    - 2,
    - 4,
    - 6,
    - 7,
    - 9,
    - 11,
    - 13,
    - 14,
    - 16,
    - 18,
    - 20,
    - 21,
    - 23,
    - 25,
    - 26,
    - 28,
    - 30,
    - 31,
    - 33,
    - 35,
    - 36,
    - 38,
    - 40,
    - 41,
    - 43,
    - 44,
    - 46,
    - 47,
    - 49,
    - 51,
    - 52,
    - 53,
    - 55,
    - 56,
    - 58,
    - 59,
    - 61,
    - 62,
    - 63,
    - 65,
    - 66,
    - 67,
    - 69,
    - 70,
    - 71,
    - 72,
    - 74,
    - 75,
    - 76,
    - 77,
    - 78,
    - 79,
    - 80,
    - 81,
    - 82,
    - 83,
    - 84,
    - 85,
    - 86,
    - 87,
    - 88,
    - 89,
    - 90,
    - 90,
    - 91,
    - 92,
    - 93,
    - 93,
    - 94,
    - 94,
    - 95,
    - 96,
    - 96,
    - 97,
    - 97,
    - 98,
    - 98,
    - 98,
    - 99,
    - 99,
    - 99,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 100,
    - 99,
    - 99,
    - 99,
    - 98,
    - 98,
    - 98,
    - 97,
    - 97,
    - 96,
    - 96,
    - 95,
    - 94,
    - 94,
    - 93,
    - 93,
    - 92,
    - 91,
    - 90,
    - 90,
    - 89,
    - 88,
    - 87,
    - 86,
    - 85,
    - 84,
    - 83,
    - 82,
    - 81,
    - 80,
    - 79,
    - 78,
    - 77,
    - 76,
    - 75,
    - 74,
    - 72,
    - 71,
    - 70,
    - 69,
    - 67,
    - 66,
    - 65,
    - 63,
    - 62,
    - 61,
    - 59,
    - 58,
    - 56,
    - 55,
    - 53,
    - 52,
    - 51,
    - 49,
    - 47,
    - 46,
    - 44,
    - 43,
    - 41,
    - 40,
    - 38,
    - 36,
    - 35,
    - 33,
    - 31,
    - 30,
    - 28,
    - 26,
    - 25,
    - 23,
    - 21,
    - 20,
    - 18,
    - 16,
    - 14,
    - 13,
    - 11,
    - 9,
    - 7,
    - 6,
    - 4,
    - 2
    );

    -- The lookup table for cosine
    CONSTANT cos_table : t_trig_table := (
        100,
        99,
        99,
        99,
        99,
        99,
        99,
        99,
        99,
        98,
        98,
        98,
        97,
        97,
        97,
        96,
        96,
        95,
        95,
        94,
        93,
        93,
        92,
        92,
        91,
        90,
        89,
        89,
        88,
        87,
        86,
        85,
        84,
        83,
        82,
        81,
        80,
        79,
        78,
        77,
        76,
        75,
        74,
        73,
        71,
        70,
        69,
        68,
        66,
        65,
        64,
        62,
        61,
        60,
        58,
        57,
        55,
        54,
        52,
        51,
        50,
        48,
        46,
        45,
        43,
        42,
        40,
        39,
        37,
        35,
        34,
        32,
        30,
        29,
        27,
        25,
        24,
        22,
        20,
        19,
        17,
        15,
        13,
        12,
        10,
        8,
        6,
        5,
        3,
        1,
        0,
        - 2,
        - 4,
        - 6,
        - 7,
        - 9,
        - 11,
        - 13,
        - 14,
        - 16,
        - 18,
        - 20,
        - 21,
        - 23,
        - 25,
        - 26,
        - 28,
        - 30,
        - 31,
        - 33,
        - 35,
        - 36,
        - 38,
        - 40,
        - 41,
        - 43,
        - 44,
        - 46,
        - 47,
        - 49,
        - 50,
        - 52,
        - 53,
        - 55,
        - 56,
        - 58,
        - 59,
        - 61,
        - 62,
        - 63,
        - 65,
        - 66,
        - 67,
        - 69,
        - 70,
        - 71,
        - 72,
        - 74,
        - 75,
        - 76,
        - 77,
        - 78,
        - 79,
        - 80,
        - 81,
        - 82,
        - 83,
        - 84,
        - 85,
        - 86,
        - 87,
        - 88,
        - 89,
        - 90,
        - 90,
        - 91,
        - 92,
        - 93,
        - 93,
        - 94,
        - 94,
        - 95,
        - 96,
        - 96,
        - 97,
        - 97,
        - 98,
        - 98,
        - 98,
        - 99,
        - 99,
        - 99,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 100,
        - 99,
        - 99,
        - 99,
        - 98,
        - 98,
        - 98,
        - 97,
        - 97,
        - 96,
        - 96,
        - 95,
        - 94,
        - 94,
        - 93,
        - 93,
        - 92,
        - 91,
        - 90,
        - 90,
        - 89,
        - 88,
        - 87,
        - 86,
        - 85,
        - 84,
        - 83,
        - 82,
        - 81,
        - 80,
        - 79,
        - 78,
        - 77,
        - 76,
        - 75,
        - 74,
        - 72,
        - 71,
        - 70,
        - 69,
        - 67,
        - 66,
        - 65,
        - 63,
        - 62,
        - 61,
        - 59,
        - 58,
        - 56,
        - 55,
        - 53,
        - 52,
        - 51,
        - 49,
        - 47,
        - 46,
        - 44,
        - 43,
        - 41,
        - 40,
        - 38,
        - 36,
        - 35,
        - 33,
        - 31,
        - 30,
        - 28,
        - 26,
        - 25,
        - 23,
        - 21,
        - 20,
        - 18,
        - 16,
        - 14,
        - 13,
        - 11,
        - 9,
        - 7,
        - 6,
        - 4,
        - 2,
        - 1,
        1,
        3,
        5,
        6,
        8,
        10,
        12,
        13,
        15,
        17,
        19,
        20,
        22,
        24,
        25,
        27,
        29,
        30,
        32,
        34,
        35,
        37,
        39,
        40,
        42,
        43,
        45,
        46,
        48,
        50,
        51,
        52,
        54,
        55,
        57,
        58,
        60,
        61,
        62,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        89,
        90,
        91,
        92,
        92,
        93,
        93,
        94,
        95,
        95,
        96,
        96,
        97,
        97,
        97,
        98,
        98,
        98,
        99,
        99,
        99,
        99,
        99,
        99,
        99,
        99
    );

    -- -- The lookup talble for tangent
    -- CONSTANT tan_table : tan_table_type := (
    --     "00000000000000000000000000000000",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011010011010000001010010110100",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101",
    --     "10100101000011010011000100110010",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011001100110101011100001111000",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101"
    -- );

    -- The function of sin that returns a float
    -- It will also normalize the input to [0, 359]
    FUNCTION sin_float (x : INTEGER) RETURN float;

    -- The function of cos that returns a float
    -- It will also normalize the input to [0, 359]
    FUNCTION cos_float (x : INTEGER) RETURN float;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------
    TYPE vec2_int IS ARRAY (0 TO 1) OF INTEGER;
    TYPE vec3_int IS ARRAY (0 TO 2) OF INTEGER;
    TYPE vec4_int IS ARRAY (0 TO 3) OF INTEGER;

    TYPE vec2_float IS ARRAY (0 TO 1) OF float;
    TYPE vec3_float IS ARRAY (0 TO 2) OF float;
    TYPE vec4_float IS ARRAY (0 TO 3) OF float;

    TYPE mat3_int IS ARRAY (0 TO 2) OF vec3_int;
    TYPE mat4_int IS ARRAY (0 TO 3) OF vec4_int;

    TYPE mat3_float IS ARRAY (0 TO 2) OF vec3_float;
    TYPE mat4_float IS ARRAY (0 TO 3) OF vec4_float;

    -- --------------------------------------------------------------------
    --            Vector and Matrix Operations
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int;

    -- --------------------------------------------------------------------
    -- FLOAT type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_float) RETURN vec2_float;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_float) RETURN vec2_float;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_float) RETURN float;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_float; b : float) RETURN vec2_float;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_float; b : float) RETURN vec2_float;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_float) RETURN vec3_float;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_float) RETURN vec3_float;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_float) RETURN float;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_float; b : float) RETURN vec3_float;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_float; b : float) RETURN vec3_float;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_float) RETURN vec4_float;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_float) RETURN vec4_float;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_float) RETURN float;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_float; b : float) RETURN vec4_float;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_float; b : float) RETURN vec4_float;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_float; b : vec3_float) RETURN vec3_float;

    -- -- Normalize the vector
    -- FUNCTION normalize (a : vec2_float) RETURN vec2_float;
    -- FUNCTION normalize (a : vec3_float) RETURN vec3_float;
    -- FUNCTION normalize (a : vec4_float) RETURN vec4_float;

    -- -- Length of the vector
    -- FUNCTION length (a : vec2_float) RETURN float;
    -- FUNCTION length (a : vec3_float) RETURN float;
    -- FUNCTION length (a : vec4_float) RETURN float;

    -- -- Distance between two vectors
    -- FUNCTION distance (a, b : vec2_float) RETURN float;
    -- FUNCTION distance (a, b : vec3_float) RETURN float;
    -- FUNCTION distance (a, b : vec4_float) RETURN float;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_float) RETURN mat3_float;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_float; b : vec3_float) RETURN vec3_float;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_float) RETURN mat4_float;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_float; b : vec4_float) RETURN vec4_float;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_float) RETURN vec2_int;
    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int;
    FUNCTION to_vec3_int (a : vec3_float) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec4_int) RETURN vec3_int;
    FUNCTION to_vec4_int (a : vec4_float) RETURN vec4_int;
    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int;
    FUNCTION to_mat3_int (a : mat3_float) RETURN mat3_int;
    FUNCTION to_mat4_int (a : mat4_float) RETURN mat4_int;
    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int;

    -- To float type
    FUNCTION to_vec2_float (a : vec2_int) RETURN vec2_float;
    FUNCTION to_vec2_float (a : vec3_float) RETURN vec2_float;
    FUNCTION to_vec3_float (a : vec3_int) RETURN vec3_float;
    FUNCTION to_vec3_float (a : vec2_float; w : float) RETURN vec3_float;
    FUNCTION to_vec3_float (a : vec4_float) RETURN vec3_float;
    FUNCTION to_vec4_float (a : vec4_int) RETURN vec4_float;
    FUNCTION to_vec4_float (a : vec3_float; w : float) RETURN vec4_float;
    FUNCTION to_mat3_float (a : mat3_int) RETURN mat3_float;
    FUNCTION to_mat4_float (a : mat4_int) RETURN mat4_float;
    FUNCTION to_mat4_float (a : mat3_float) RETURN mat4_float;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- Perspective Projection
    FUNCTION perspective (left, right, bottom, top, near, far : INTEGER) RETURN mat4_float;
    -- Orthographic Projection
    FUNCTION orthographic (left, right, bottom, top, near, far : INTEGER) RETURN mat4_float;
    -- Look at function for the view matrix
    -- FUNCTION look_at (eye, at, up : vec3_int) RETURN mat4_float;

    -- --------------------------------------------------------------------
    --                Constants
    -- --------------------------------------------------------------------
    -- CONSTANT float_zero : float := "00000000000000000000000000000000";
    -- CONSTANT float_one : float := "00111111100000000000000000000000";
    -- CONSTANT float_neg_one : float := "10111111100000000000000000000000";
    CONSTANT float_zero : float := 0;
    CONSTANT float_one : float := 100;
    CONSTANT float_neg_one : float := - 100;

    CONSTANT vec2_int_zero : vec2_int := (0, 0);
    CONSTANT vec2_int_one : vec2_int := (1, 1);
    CONSTANT vec2_int_neg_one : vec2_int := (-1, -1);

    CONSTANT vec2_float_zero : vec2_float := (float_zero, float_zero);
    CONSTANT vec2_float_one : vec2_float := (float_one, float_one);
    CONSTANT vec2_float_neg_one : vec2_float := (float_neg_one, float_neg_one);

    CONSTANT vec3_int_zero : vec3_int := (0, 0, 0);
    CONSTANT vec3_int_one : vec3_int := (1, 1, 1);
    CONSTANT vec3_int_neg_one : vec3_int := (-1, -1, -1);

    -- CONSTANT vec3_float_zero : vec3_float := (float_zero, float_zero, float_zero);
    -- CONSTANT vec3_float_one : vec3_float := (float_one, float_one, float_one);
    -- CONSTANT vec3_float_neg_one : vec3_float := (float_neg_one, float_neg_one, float_neg_one);

    CONSTANT vec4_int_zero : vec4_int := (0, 0, 0, 0);
    CONSTANT vec4_int_one : vec4_int := (1, 1, 1, 1);
    CONSTANT vec4_int_neg_one : vec4_int := (-1, -1, -1, -1);

    CONSTANT vec4_float_zero : vec4_float := (float_zero, float_zero, float_zero, float_zero);
    CONSTANT vec4_float_one : vec4_float := (float_one, float_one, float_one, float_one);
    CONSTANT vec4_float_neg_one : vec4_float := (float_neg_one, float_neg_one, float_neg_one, float_neg_one);

    CONSTANT identity_mat3_int : mat3_int := ((1, 0, 0), (0, 1, 0), (0, 0, 1));
    CONSTANT identity_mat4_int : mat4_int := ((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1));
    CONSTANT identity_mat3_float : mat3_float := (
    (float_one, float_zero, float_zero),
        (float_zero, float_one, float_zero),
        (float_zero, float_zero, float_one)
    );
    CONSTANT identity_mat4_float : mat4_float := (
    (float_one, float_zero, float_zero, float_zero),
        (float_zero, float_one, float_zero, float_zero),
        (float_zero, float_zero, float_one, float_zero),
        (float_zero, float_zero, float_zero, float_one)
    );
    -- CONSTANT default_perspective_mat4_float : mat4_float := (
    -- ("00111111110111011011001111010111", float_zero, float_one, float_zero),
    --     (float_zero, "00111111110111011011001111010111", float_neg_one, float_zero),
    --     (float_zero, float_zero, "00111111100000000000000001010100", float_neg_one),
    --     (float_zero, float_zero, "10111101110011001101001000001011", float_zero)
    -- );
    CONSTANT default_perspective_mat4_float : mat4_float := (
    (173, float_zero, float_one, float_zero),
        (float_zero, 173, float_neg_one, float_zero),
        (float_zero, float_zero, float_one, float_neg_one),
        (float_zero, float_zero, -10, float_zero)
    );
    -- CONSTANT default_ortho_mat4_float : mat4_float := (
    -- ("00111011000000000000000000000000", float_zero, float_zero, float_neg_one),
    --     (float_zero, "00111011010110100111010000001110", float_zero, float_neg_one),
    --     (float_zero, float_zero, "10111001010100011011110001110110", "10111111100000000000011010001110"),
    --     (float_zero, float_zero, float_zero, float_one)
    -- );
    CONSTANT default_ortho_mat4_float : mat4_float := (
    (float_zero, float_zero, float_zero, float_neg_one),
        (float_zero, float_zero, float_zero, float_neg_one),
        (float_zero, float_zero, float_zero, -100),
        (float_zero, float_zero, float_zero, float_one)
    );
    CONSTANT look_forward_mat4_float : mat4_float := (
    (float_one, float_zero, float_zero, float_zero),
        (float_zero, float_one, float_zero, float_zero),
        (float_zero, float_zero, float_one, float_zero),
        (float_zero, float_zero, float_zero, float_one)
    );

    -- --------------------------------------------------------------------
    --               Transformation
    -- --------------------------------------------------------------------
    -- Translation
    FUNCTION translation_mat4_float (displacement : vec3_int) RETURN mat4_float;
    -- Rotation
    FUNCTION rotation_mat4_float (euler : vec3_int) RETURN mat4_float;
    -- Scaling
    FUNCTION scaling_mat4_float (scale : vec3_int) RETURN mat4_float;

END PACKAGE;

PACKAGE BODY math3D_pkg IS
    -- --------------------------------------------------------------------
    --            Trigonometric Func
    -- --------------------------------------------------------------------
    FUNCTION sin_float (x : INTEGER) RETURN float IS
    BEGIN
        IF x < 0 THEN
            RETURN -sin_table(-x MOD 360);
        ELSE
            RETURN sin_table(x MOD 360);
        END IF;
    END sin_float;

    FUNCTION cos_float (x : INTEGER) RETURN float IS
    BEGIN
        IF x < 0 THEN
            RETURN cos_table(-x MOD 360);
        ELSE
            RETURN cos_table(x MOD 360);
        END IF;
    END cos_float;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        result(3) := a(3) * b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        result(3) := a(3) / b;
        RETURN result;
    END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- FLOAT type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_float; b : float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        result(0) := mult_float(a(0), b);
        result(1) := mult_float(a(1), b);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_float; b : float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        result(0) := div_float(a(0), b);
        result(1) := div_float(a(1), b);
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        -- result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        result := mult_float(a(0), b(0)) + mult_float(a(1), b(1)) + mult_float(a(2), b(2));
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_float; b : float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        -- result(2) := a(2) * b;
        result(0) := mult_float(a(0), b);
        result(1) := mult_float(a(1), b);
        result(2) := mult_float(a(2), b);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_float; b : float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        -- result(2) := a(2) / b;
        result(0) := div_float(a(0), b);
        result(1) := div_float(a(1), b);
        result(2) := div_float(a(2), b);
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_float) RETURN float IS
        VARIABLE result : float;
    BEGIN
        -- result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        result := mult_float(a(0), b(0)) + mult_float(a(1), b(1)) + mult_float(a(2), b(2)) + mult_float(a(3), b(3));
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_float; b : float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        -- result(2) := a(2) * b;
        -- result(3) := a(3) * b;
        result(0) := mult_float(a(0), b);
        result(1) := mult_float(a(1), b);
        result(2) := mult_float(a(2), b);
        result(3) := mult_float(a(3), b);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_float; b : float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        -- result(2) := a(2) / b;
        -- result(3) := a(3) / b;
        result(0) := div_float(a(0), b);
        result(1) := div_float(a(1), b);
        result(2) := div_float(a(2), b);
        result(3) := div_float(a(3), b);
        RETURN result;
    END FUNCTION;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_float; b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        -- result(0) := (a(1) * b(2)) - (a(2) * b(1));
        -- result(1) := (a(2) * b(0)) - (a(0) * b(2));
        -- result(2) := (a(0) * b(1)) - (a(1) * b(0));
        result(0) := mult_float(a(1), b(2)) - mult_float(a(2), b(1));
        result(1) := mult_float(a(2), b(0)) - mult_float(a(0), b(2));
        result(2) := mult_float(a(0), b(1)) - mult_float(a(1), b(0));
        RETURN result;
    END FUNCTION;

    -- -- Vector Length
    -- FUNCTION length (a : vec2_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt(1);
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec3_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec4_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)) + (a(3) * a(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Distance
    -- FUNCTION distance (a, b : vec2_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec3_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec4_float) RETURN float IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)) + (a(3) - b(3)) * (a(3) - b(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Nomalization
    -- FUNCTION normalize (a : vec2_float) RETURN vec2_float IS
    --     VARIABLE result : vec2_float;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec3_float) RETURN vec3_float IS
    --     VARIABLE result : vec3_float;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec4_float) RETURN vec4_float IS
    --     VARIABLE result : vec4_float;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2) + a(3) * a(3));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     result(3) := a(3) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := a(0)(0) + b(0)(0);
        result(0)(1) := a(0)(1) + b(0)(1);
        result(0)(2) := a(0)(2) + b(0)(2);

        result(1)(0) := a(1)(0) + b(1)(0);
        result(1)(1) := a(1)(1) + b(1)(1);
        result(1)(2) := a(1)(2) + b(1)(2);

        result(2)(0) := a(2)(0) + b(2)(0);
        result(2)(1) := a(2)(1) + b(2)(1);
        result(2)(2) := a(2)(2) + b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := a(0)(0) - b(0)(0);
        result(0)(1) := a(0)(1) - b(0)(1);
        result(0)(2) := a(0)(2) - b(0)(2);

        result(1)(0) := a(1)(0) - b(1)(0);
        result(1)(1) := a(1)(1) - b(1)(1);
        result(1)(2) := a(1)(2) - b(1)(2);

        result(2)(0) := a(2)(0) - b(2)(0);
        result(2)(1) := a(2)(1) - b(2)(1);
        result(2)(2) := a(2)(2) - b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_float) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        -- result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        -- result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        -- result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        -- result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        -- result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        -- result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        -- result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        -- result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        -- result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        result(0)(0) := mult_float(a(0)(0), b(0)(0)) + mult_float(a(0)(1), b(1)(0)) + mult_float(a(0)(2), b(2)(0));
        result(0)(1) := mult_float(a(0)(0), b(0)(1)) + mult_float(a(0)(1), b(1)(1)) + mult_float(a(0)(2), b(2)(1));
        result(0)(2) := mult_float(a(0)(0), b(0)(2)) + mult_float(a(0)(1), b(1)(2)) + mult_float(a(0)(2), b(2)(2));

        result(1)(0) := mult_float(a(1)(0), b(0)(0)) + mult_float(a(1)(1), b(1)(0)) + mult_float(a(1)(2), b(2)(0));
        result(1)(1) := mult_float(a(1)(0), b(0)(1)) + mult_float(a(1)(1), b(1)(1)) + mult_float(a(1)(2), b(2)(1));
        result(1)(2) := mult_float(a(1)(0), b(0)(2)) + mult_float(a(1)(1), b(1)(2)) + mult_float(a(1)(2), b(2)(2));

        result(2)(0) := mult_float(a(2)(0), b(0)(0)) + mult_float(a(2)(1), b(1)(0)) + mult_float(a(2)(2), b(2)(0));
        result(2)(1) := mult_float(a(2)(0), b(0)(1)) + mult_float(a(2)(1), b(1)(1)) + mult_float(a(2)(2), b(2)(1));
        result(2)(2) := mult_float(a(2)(0), b(0)(2)) + mult_float(a(2)(1), b(1)(2)) + mult_float(a(2)(2), b(2)(2));

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_float; b : vec3_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        -- result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        -- result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        -- result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        result(0) := mult_float(a(0)(0), b(0)) + mult_float(a(0)(1), b(1)) + mult_float(a(0)(2), b(2));
        result(1) := mult_float(a(1)(0), b(0)) + mult_float(a(1)(1), b(1)) + mult_float(a(1)(2), b(2));
        result(2) := mult_float(a(2)(0), b(0)) + mult_float(a(2)(1), b(1)) + mult_float(a(2)(2), b(2));
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        -- result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        -- result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        -- result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        -- result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        -- result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        -- result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        -- result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        -- result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        -- result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        -- result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        -- result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        -- result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        -- result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        -- result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        -- result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        -- result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        result (0)(0) := mult_float(a(0)(0), b(0)(0)) + mult_float(a(0)(1), b(1)(0)) + mult_float(a(0)(2), b(2)(0)) + mult_float(a(0)(3), b(3)(0));
        result (0)(1) := mult_float(a(0)(0), b(0)(1)) + mult_float(a(0)(1), b(1)(1)) + mult_float(a(0)(2), b(2)(1)) + mult_float(a(0)(3), b(3)(1));
        result (0)(2) := mult_float(a(0)(0), b(0)(2)) + mult_float(a(0)(1), b(1)(2)) + mult_float(a(0)(2), b(2)(2)) + mult_float(a(0)(3), b(3)(2));
        result (0)(3) := mult_float(a(0)(0), b(0)(3)) + mult_float(a(0)(1), b(1)(3)) + mult_float(a(0)(2), b(2)(3)) + mult_float(a(0)(3), b(3)(3));

        result (1)(0) := mult_float(a(1)(0), b(0)(0)) + mult_float(a(1)(1), b(1)(0)) + mult_float(a(1)(2), b(2)(0)) + mult_float(a(1)(3), b(3)(0));
        result (1)(1) := mult_float(a(1)(0), b(0)(1)) + mult_float(a(1)(1), b(1)(1)) + mult_float(a(1)(2), b(2)(1)) + mult_float(a(1)(3), b(3)(1));
        result (1)(2) := mult_float(a(1)(0), b(0)(2)) + mult_float(a(1)(1), b(1)(2)) + mult_float(a(1)(2), b(2)(2)) + mult_float(a(1)(3), b(3)(2));
        result (1)(3) := mult_float(a(1)(0), b(0)(3)) + mult_float(a(1)(1), b(1)(3)) + mult_float(a(1)(2), b(2)(3)) + mult_float(a(1)(3), b(3)(3));

        result (2)(0) := mult_float(a(2)(0), b(0)(0)) + mult_float(a(2)(1), b(1)(0)) + mult_float(a(2)(2), b(2)(0)) + mult_float(a(2)(3), b(3)(0));
        result (2)(1) := mult_float(a(2)(0), b(0)(1)) + mult_float(a(2)(1), b(1)(1)) + mult_float(a(2)(2), b(2)(1)) + mult_float(a(2)(3), b(3)(1));
        result (2)(2) := mult_float(a(2)(0), b(0)(2)) + mult_float(a(2)(1), b(1)(2)) + mult_float(a(2)(2), b(2)(2)) + mult_float(a(2)(3), b(3)(2));
        result (2)(3) := mult_float(a(2)(0), b(0)(3)) + mult_float(a(2)(1), b(1)(3)) + mult_float(a(2)(2), b(2)(3)) + mult_float(a(2)(3), b(3)(3));

        result (3)(0) := mult_float(a(3)(0), b(0)(0)) + mult_float(a(3)(1), b(1)(0)) + mult_float(a(3)(2), b(2)(0)) + mult_float(a(3)(3), b(3)(0));
        result (3)(1) := mult_float(a(3)(0), b(0)(1)) + mult_float(a(3)(1), b(1)(1)) + mult_float(a(3)(2), b(2)(1)) + mult_float(a(3)(3), b(3)(1));
        result (3)(2) := mult_float(a(3)(0), b(0)(2)) + mult_float(a(3)(1), b(1)(2)) + mult_float(a(3)(2), b(2)(2)) + mult_float(a(3)(3), b(3)(2));
        result (3)(3) := mult_float(a(3)(0), b(0)(3)) + mult_float(a(3)(1), b(1)(3)) + mult_float(a(3)(2), b(2)(3)) + mult_float(a(3)(3), b(3)(3));

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_float; b : vec4_float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        -- result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        -- result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        -- result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        -- result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);

        result(0) := mult_float(a(0)(0), b(0)) + mult_float(a(0)(1), b(1)) + mult_float(a(0)(2), b(2)) + mult_float(a(0)(3), b(3));
        result(1) := mult_float(a(1)(0), b(0)) + mult_float(a(1)(1), b(1)) + mult_float(a(1)(2), b(2)) + mult_float(a(1)(3), b(3));
        result(2) := mult_float(a(2)(0), b(0)) + mult_float(a(2)(1), b(1)) + mult_float(a(2)(2), b(2)) + mult_float(a(2)(3), b(3));
        result(3) := mult_float(a(3)(0), b(0)) + mult_float(a(3)(1), b(1)) + mult_float(a(3)(2), b(2)) + mult_float(a(3)(3), b(3));

        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_float) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec3_float) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int(a : vec4_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec4_float) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        result(3) := to_integer(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_int (a : mat3_float) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat4_float) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));
        result(0)(3) := to_integer(a(0)(3));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));
        result(1)(3) := to_integer(a(1)(3));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        result(2)(3) := to_integer(a(2)(3));

        result(3)(0) := to_integer(a(3)(0));
        result(3)(1) := to_integer(a(3)(1));
        result(3)(2) := to_integer(a(3)(2));
        result(3)(3) := to_integer(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := 0;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := 0;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := 0;

        result(3)(0) := 0;
        result(3)(1) := 0;
        result(3)(2) := 0;
        result(3)(3) := 1;
        RETURN result;
    END FUNCTION;

    -- To float type
    FUNCTION to_vec2_float (a : vec2_int) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := to_float(a(0));
        result(1) := to_float(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_float (a : vec3_float) RETURN vec2_float IS
        VARIABLE result : vec2_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec3_int) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := to_float(a(0));
        result(1) := to_float(a(1));
        result(2) := to_float(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec2_float; w : float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_float (a : vec4_float) RETURN vec3_float IS
        VARIABLE result : vec3_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_float (a : vec4_int) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := to_float(a(0));
        result(1) := to_float(a(1));
        result(2) := to_float(a(2));
        result(3) := to_float(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_float (a : vec3_float; w : float) RETURN vec4_float IS
        VARIABLE result : vec4_float;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_float (a : mat3_int) RETURN mat3_float IS
        VARIABLE result : mat3_float;
    BEGIN
        result(0)(0) := to_float(a(0)(0));
        result(0)(1) := to_float(a(0)(1));
        result(0)(2) := to_float(a(0)(2));

        result(1)(0) := to_float(a(1)(0));
        result(1)(1) := to_float(a(1)(1));
        result(1)(2) := to_float(a(1)(2));

        result(2)(0) := to_float(a(2)(0));
        result(2)(1) := to_float(a(2)(1));
        result(2)(2) := to_float(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_float (a : mat4_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0)(0) := to_float(a(0)(0));
        result(0)(1) := to_float(a(0)(1));
        result(0)(2) := to_float(a(0)(2));
        result(0)(3) := to_float(a(0)(3));

        result(1)(0) := to_float(a(1)(0));
        result(1)(1) := to_float(a(1)(1));
        result(1)(2) := to_float(a(1)(2));
        result(1)(3) := to_float(a(1)(3));

        result(2)(0) := to_float(a(2)(0));
        result(2)(1) := to_float(a(2)(1));
        result(2)(2) := to_float(a(2)(2));
        result(2)(3) := to_float(a(2)(3));

        result(3)(0) := to_float(a(3)(0));
        result(3)(1) := to_float(a(3)(1));
        result(3)(2) := to_float(a(3)(2));
        result(3)(3) := to_float(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_float (a : mat3_float) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := float_zero;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := float_zero;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := float_zero;

        result(3)(0) := float_zero;
        result(3)(1) := float_zero;
        result(3)(2) := float_zero;
        result(3)(3) := float_one;
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --                Transform
    -- --------------------------------------------------------------------
    -- Translate
    FUNCTION translation_mat4_float (displacement : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result := identity_mat4_float;
        result(0)(3) := to_float(displacement(0));
        result(1)(3) := to_float(displacement(1));
        result(2)(3) := to_float(displacement(2));
        RETURN result;
    END FUNCTION;

    -- Rotation
    FUNCTION rotation_mat4_float (euler : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE a, b, c, d, e, f, g, h, i : INTEGER;
        VARIABLE cos_x, cos_y, cos_z, sin_x, sin_y, sin_z : INTEGER;
    BEGIN
        result := identity_mat4_float;

        cos_x := cos_float(euler(0));
        cos_y := cos_float(euler(1));
        cos_z := cos_float(euler(2));
        sin_x := sin_float(euler(0));
        sin_y := sin_float(euler(1));
        sin_z := sin_float(euler(2));

        a := cos_y * cos_z;
        b := cos_y * sin_z;
        c := - sin_y;
        d := (sin_x * sin_y * cos_z) - (cos_x * sin_z);
        e := sin_x * sin_y * sin_z + cos_x * cos_z;
        f := sin_x * cos_y;
        g := cos_x * sin_y * cos_z + sin_x * sin_z;
        h := cos_x * sin_y * sin_z - sin_x * cos_z;
        i := cos_x * cos_y;

        result(0)(0) := a;
        result(0)(1) := b;
        result(0)(2) := c;
        result(1)(0) := d;
        result(1)(1) := e;
        result(1)(2) := f;
        result(2)(0) := g;
        result(2)(1) := h;
        result(2)(2) := i;

        RETURN result;
    END FUNCTION;

    -- Scaling
    FUNCTION scaling_mat4_float (scale : vec3_int) RETURN mat4_float IS
        VARIABLE result : mat4_float;
    BEGIN
        result := identity_mat4_float;
        result(0)(0) := to_float(scale(0));
        result(1)(1) := to_float(scale(1));
        result(2)(2) := to_float(scale(2));
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- Perspective Projection
    FUNCTION perspective(left, right, bottom, top, near, far : INTEGER) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE l, r, b, t, n, f : INTEGER;
    BEGIN
        l := to_float(left);
        r := to_float(right);
        b := to_float(bottom);
        t := to_float(top);
        n := to_float(near);
        f := to_float(far);

        result(0)(0) := (n * 2) / (r - l);
        result(0)(1) := to_float(0.0);
        result(0)(2) := (r + l) / (r - l);
        result(0)(3) := to_float(0.0);

        result(1)(0) := to_float(0.0);
        result(1)(1) := (2 * n) / (t - b);
        result(1)(2) := (t + b) / (t - b);
        result(1)(3) := to_float(0.0);

        result(2)(0) := to_float(0.0);
        result(2)(1) := to_float(0.0);
        result(2)(2) := - 1.0 * (f + n) / (f - n);
        result(2)(3) := - 1.0 * (2 * f * n) / (f - n);

        result(3)(0) := to_float(0.0);
        result(3)(1) := to_float(0.0);
        result(3)(2) := to_float(-1.0);
        result(3)(3) := to_float(0.0);

        RETURN result;
    END FUNCTION;

    -- Orthographic Projection
    FUNCTION orthographic(left, right, bottom, top, near, far : INTEGER) RETURN mat4_float IS
        VARIABLE result : mat4_float;
        VARIABLE l, r, b, t, n, f : INTEGER;
    BEGIN
        l := to_float(left);
        r := to_float(right);
        b := to_float(bottom);
        t := to_float(top);
        n := to_float(near);
        f := to_float(far);

        result(0)(0) := to_float(2.0) / (r - l);
        result(0)(1) := to_float(0.0);
        result(0)(2) := to_float(0.0);
        result(0)(3) := to_float(-1.0) * (r + l) / (r - l);

        result(1)(0) := to_float(0.0);
        result(1)(1) := to_float(2.0) / (t - b);
        result(1)(2) := to_float(0.0);
        result(1)(3) := to_float(-1.0) * (t + b) / (t - b);

        result(2)(0) := to_float(0.0);
        result(2)(1) := to_float(0.0);
        result(2)(2) := to_float(-2.0) / (f - n);
        result(2)(3) := to_float(-1.0) * (f + n) / (f - n);

        result(3)(0) := to_float(0.0);
        result(3)(1) := to_float(0.0);
        result(3)(2) := to_float(0.0);
        result(3)(3) := to_float(1.0);

        RETURN result;
    END FUNCTION;

    -- -- LookAt
    -- FUNCTION look_at(eye, at, up : vec3_int) RETURN mat4_float IS
    --     VARIABLE result : mat4_float;
    --     VARIABLE f, s, u : vec3_float;
    -- BEGIN
    --     f := normalize(to_vec3_float(at - eye));
    --     s := normalize(cross(f, to_vec3_float(up)));
    --     u := cross(s, f);

    --     result(0)(0) := s(0);
    --     result(0)(1) := u(0);
    --     result(0)(2) := - f(0);
    --     result(0)(3) := float_zero;

    --     result(1)(0) := s(1);
    --     result(1)(1) := u(1);
    --     result(1)(2) := - f(1);
    --     result(1)(3) := float_zero;

    --     result(2)(0) := s(2);
    --     result(2)(1) := u(2);
    --     result(2)(2) := - f(2);
    --     result(2)(3) := float_zero;

    --     result(3)(0) := float_zero;
    --     result(3)(1) := float_zero;
    --     result(3)(2) := float_zero;
    --     result(3)(3) := float_one;

    --     RETURN result;
    -- END FUNCTION;
END PACKAGE BODY;