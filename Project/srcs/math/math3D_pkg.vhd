LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE work.my_fixed_pkg.ALL;

PACKAGE math3D_pkg IS
    -- --------------------------------------------------------------------
    --               Trigonometry
    -- -------------------------------------------------------------------- 
    TYPE t_trig_table IS ARRAY (0 TO 359) OF fixed;

    -- The lookup table for sine
    CONSTANT sin_table : t_trig_table := (
        0,
        8,
        17,
        26,
        35,
        44,
        53,
        62,
        71,
        80,
        88,
        97,
        106,
        115,
        123,
        132,
        141,
        149,
        158,
        166,
        175,
        183,
        191,
        200,
        208,
        216,
        224,
        232,
        240,
        248,
        255,
        263,
        271,
        278,
        286,
        293,
        300,
        308,
        315,
        322,
        329,
        335,
        342,
        349,
        355,
        362,
        368,
        374,
        380,
        386,
        392,
        397,
        403,
        408,
        414,
        419,
        424,
        429,
        434,
        438,
        443,
        447,
        452,
        456,
        460,
        464,
        467,
        471,
        474,
        477,
        481,
        484,
        486,
        489,
        492,
        494,
        496,
        498,
        500,
        502,
        504,
        505,
        507,
        508,
        509,
        510,
        510,
        511,
        511,
        511,
        512,
        511,
        511,
        511,
        510,
        510,
        509,
        508,
        507,
        505,
        504,
        502,
        500,
        498,
        496,
        494,
        492,
        489,
        486,
        484,
        481,
        477,
        474,
        471,
        467,
        464,
        460,
        456,
        452,
        447,
        443,
        438,
        434,
        429,
        424,
        419,
        414,
        408,
        403,
        397,
        392,
        386,
        380,
        374,
        368,
        362,
        355,
        349,
        342,
        335,
        329,
        322,
        315,
        308,
        300,
        293,
        286,
        278,
        271,
        263,
        255,
        248,
        240,
        232,
        224,
        216,
        208,
        200,
        191,
        183,
        175,
        166,
        158,
        149,
        141,
        132,
        123,
        115,
        106,
        97,
        88,
        80,
        71,
        62,
        53,
        44,
        35,
        26,
        17,
        8,
        0,
        - 9,
        - 18,
        - 27,
        - 36,
        - 45,
        - 54,
        - 63,
        - 72,
        - 81,
        - 89,
        - 98,
        - 107,
        - 116,
        - 124,
        - 133,
        - 142,
        - 150,
        - 159,
        - 167,
        - 176,
        - 184,
        - 192,
        - 201,
        - 209,
        - 217,
        - 225,
        - 233,
        - 241,
        - 249,
        - 257,
        - 264,
        - 272,
        - 279,
        - 287,
        - 294,
        - 301,
        - 309,
        - 316,
        - 323,
        - 330,
        - 336,
        - 343,
        - 350,
        - 356,
        - 363,
        - 369,
        - 375,
        - 381,
        - 387,
        - 393,
        - 398,
        - 404,
        - 409,
        - 415,
        - 420,
        - 425,
        - 430,
        - 435,
        - 439,
        - 444,
        - 448,
        - 453,
        - 457,
        - 461,
        - 465,
        - 468,
        - 472,
        - 475,
        - 478,
        - 482,
        - 485,
        - 487,
        - 490,
        - 493,
        - 495,
        - 497,
        - 499,
        - 501,
        - 503,
        - 505,
        - 506,
        - 508,
        - 509,
        - 510,
        - 511,
        - 511,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 511,
        - 511,
        - 510,
        - 509,
        - 508,
        - 506,
        - 505,
        - 503,
        - 501,
        - 499,
        - 497,
        - 495,
        - 493,
        - 490,
        - 487,
        - 485,
        - 482,
        - 478,
        - 475,
        - 472,
        - 468,
        - 465,
        - 461,
        - 457,
        - 453,
        - 448,
        - 444,
        - 439,
        - 435,
        - 430,
        - 425,
        - 420,
        - 415,
        - 409,
        - 404,
        - 398,
        - 393,
        - 387,
        - 381,
        - 375,
        - 369,
        - 363,
        - 356,
        - 350,
        - 343,
        - 336,
        - 330,
        - 323,
        - 316,
        - 309,
        - 301,
        - 294,
        - 287,
        - 279,
        - 272,
        - 264,
        - 257,
        - 249,
        - 241,
        - 233,
        - 225,
        - 217,
        - 209,
        - 201,
        - 192,
        - 184,
        - 176,
        - 167,
        - 159,
        - 150,
        - 142,
        - 133,
        - 124,
        - 116,
        - 107,
        - 98,
        - 89,
        - 81,
        - 72,
        - 63,
        - 54,
        - 45,
        - 36,
        - 27,
        - 18,
        - 9
    );

    -- The lookup table for cosine
    CONSTANT cos_table : t_trig_table := (
        512,
        511,
        511,
        511,
        510,
        510,
        509,
        508,
        507,
        505,
        504,
        502,
        500,
        498,
        496,
        494,
        492,
        489,
        486,
        484,
        481,
        477,
        474,
        471,
        467,
        464,
        460,
        456,
        452,
        447,
        443,
        438,
        434,
        429,
        424,
        419,
        414,
        408,
        403,
        397,
        392,
        386,
        380,
        374,
        368,
        362,
        355,
        349,
        342,
        335,
        329,
        322,
        315,
        308,
        300,
        293,
        286,
        278,
        271,
        263,
        256,
        248,
        240,
        232,
        224,
        216,
        208,
        200,
        191,
        183,
        175,
        166,
        158,
        149,
        141,
        132,
        123,
        115,
        106,
        97,
        88,
        80,
        71,
        62,
        53,
        44,
        35,
        26,
        17,
        8,
        0,
        - 9,
        - 18,
        - 27,
        - 36,
        - 45,
        - 54,
        - 63,
        - 72,
        - 81,
        - 89,
        - 98,
        - 107,
        - 116,
        - 124,
        - 133,
        - 142,
        - 150,
        - 159,
        - 167,
        - 176,
        - 184,
        - 192,
        - 201,
        - 209,
        - 217,
        - 225,
        - 233,
        - 241,
        - 249,
        - 256,
        - 264,
        - 272,
        - 279,
        - 287,
        - 294,
        - 301,
        - 309,
        - 316,
        - 323,
        - 330,
        - 336,
        - 343,
        - 350,
        - 356,
        - 363,
        - 369,
        - 375,
        - 381,
        - 387,
        - 393,
        - 398,
        - 404,
        - 409,
        - 415,
        - 420,
        - 425,
        - 430,
        - 435,
        - 439,
        - 444,
        - 448,
        - 453,
        - 457,
        - 461,
        - 465,
        - 468,
        - 472,
        - 475,
        - 478,
        - 482,
        - 485,
        - 487,
        - 490,
        - 493,
        - 495,
        - 497,
        - 499,
        - 501,
        - 503,
        - 505,
        - 506,
        - 508,
        - 509,
        - 510,
        - 511,
        - 511,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 512,
        - 511,
        - 511,
        - 510,
        - 509,
        - 508,
        - 506,
        - 505,
        - 503,
        - 501,
        - 499,
        - 497,
        - 495,
        - 493,
        - 490,
        - 487,
        - 485,
        - 482,
        - 478,
        - 475,
        - 472,
        - 468,
        - 465,
        - 461,
        - 457,
        - 453,
        - 448,
        - 444,
        - 439,
        - 435,
        - 430,
        - 425,
        - 420,
        - 415,
        - 409,
        - 404,
        - 398,
        - 393,
        - 387,
        - 381,
        - 375,
        - 369,
        - 363,
        - 356,
        - 350,
        - 343,
        - 336,
        - 330,
        - 323,
        - 316,
        - 309,
        - 301,
        - 294,
        - 287,
        - 279,
        - 272,
        - 264,
        - 257,
        - 249,
        - 241,
        - 233,
        - 225,
        - 217,
        - 209,
        - 201,
        - 192,
        - 184,
        - 176,
        - 167,
        - 159,
        - 150,
        - 142,
        - 133,
        - 124,
        - 116,
        - 107,
        - 98,
        - 89,
        - 81,
        - 72,
        - 63,
        - 54,
        - 45,
        - 36,
        - 27,
        - 18,
        - 9,
        - 1,
        8,
        17,
        26,
        35,
        44,
        53,
        62,
        71,
        80,
        88,
        97,
        106,
        115,
        123,
        132,
        141,
        149,
        158,
        166,
        175,
        183,
        191,
        200,
        208,
        216,
        224,
        232,
        240,
        248,
        256,
        263,
        271,
        278,
        286,
        293,
        300,
        308,
        315,
        322,
        329,
        335,
        342,
        349,
        355,
        362,
        368,
        374,
        380,
        386,
        392,
        397,
        403,
        408,
        414,
        419,
        424,
        429,
        434,
        438,
        443,
        447,
        452,
        456,
        460,
        464,
        467,
        471,
        474,
        477,
        481,
        484,
        486,
        489,
        492,
        494,
        496,
        498,
        500,
        502,
        504,
        505,
        507,
        508,
        509,
        510,
        510,
        511,
        511,
        511
    );

    -- -- The lookup talble for tangent
    -- CONSTANT tan_table : tan_table_type := (
    --     "00000000000000000000000000000000",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011010011010000001010010110100",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101",
    --     "10100101000011010011000100110010",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011001100110101011100001111000",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101"
    -- );

    -- The function of sin that returns a fixed
    -- It will also normalize the input to [0, 359]
    FUNCTION sin_fixed (x : INTEGER) RETURN fixed;

    -- The function of cos that returns a fixed
    -- It will also normalize the input to [0, 359]
    FUNCTION cos_fixed (x : INTEGER) RETURN fixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------
    TYPE vec2_int IS ARRAY (0 TO 1) OF INTEGER;
    TYPE vec3_int IS ARRAY (0 TO 2) OF INTEGER;
    TYPE vec4_int IS ARRAY (0 TO 3) OF INTEGER;

    TYPE vec2_fixed IS ARRAY (0 TO 1) OF fixed;
    TYPE vec3_fixed IS ARRAY (0 TO 2) OF fixed;
    TYPE vec4_fixed IS ARRAY (0 TO 3) OF fixed;

    TYPE mat3_int IS ARRAY (0 TO 2) OF vec3_int;
    TYPE mat4_int IS ARRAY (0 TO 3) OF vec4_int;

    TYPE mat3_fixed IS ARRAY (0 TO 2) OF vec3_fixed;
    TYPE mat4_fixed IS ARRAY (0 TO 3) OF vec4_fixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix Operations
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int;

    -- --------------------------------------------------------------------
    -- fixed type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_fixed) RETURN vec2_fixed;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_fixed) RETURN vec2_fixed;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_fixed) RETURN fixed;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_fixed; b : fixed) RETURN vec2_fixed;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_fixed; b : fixed) RETURN vec2_fixed;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_fixed) RETURN vec3_fixed;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_fixed) RETURN vec3_fixed;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_fixed) RETURN fixed;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_fixed; b : fixed) RETURN vec3_fixed;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_fixed; b : fixed) RETURN vec3_fixed;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_fixed) RETURN vec4_fixed;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_fixed) RETURN vec4_fixed;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_fixed) RETURN fixed;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_fixed; b : fixed) RETURN vec4_fixed;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_fixed; b : fixed) RETURN vec4_fixed;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_fixed; b : vec3_fixed) RETURN vec3_fixed;

    -- -- Normalize the vector
    -- FUNCTION normalize (a : vec2_fixed) RETURN vec2_fixed;
    -- FUNCTION normalize (a : vec3_fixed) RETURN vec3_fixed;
    -- FUNCTION normalize (a : vec4_fixed) RETURN vec4_fixed;

    -- -- Length of the vector
    -- FUNCTION length (a : vec2_fixed) RETURN fixed;
    -- FUNCTION length (a : vec3_fixed) RETURN fixed;
    -- FUNCTION length (a : vec4_fixed) RETURN fixed;

    -- -- Distance between two vectors
    -- FUNCTION distance (a, b : vec2_fixed) RETURN fixed;
    -- FUNCTION distance (a, b : vec3_fixed) RETURN fixed;
    -- FUNCTION distance (a, b : vec4_fixed) RETURN fixed;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_fixed; b : vec3_fixed) RETURN vec3_fixed;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_fixed; b : vec4_fixed) RETURN vec4_fixed;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_fixed) RETURN vec2_int;
    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int;
    FUNCTION to_vec3_int (a : vec3_fixed) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec4_int) RETURN vec3_int;
    FUNCTION to_vec4_int (a : vec4_fixed) RETURN vec4_int;
    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int;
    FUNCTION to_mat3_int (a : mat3_fixed) RETURN mat3_int;
    FUNCTION to_mat4_int (a : mat4_fixed) RETURN mat4_int;
    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int;

    -- To fixed type
    FUNCTION to_vec2_fixed (a : vec2_int) RETURN vec2_fixed;
    FUNCTION to_vec2_fixed (a : vec3_fixed) RETURN vec2_fixed;
    FUNCTION to_vec3_fixed (a : vec3_int) RETURN vec3_fixed;
    FUNCTION to_vec3_fixed (a : vec2_fixed; w : fixed) RETURN vec3_fixed;
    FUNCTION to_vec3_fixed (a : vec4_fixed) RETURN vec3_fixed;
    FUNCTION to_vec4_fixed (a : vec4_int) RETURN vec4_fixed;
    FUNCTION to_vec4_fixed (a : vec3_fixed; w : fixed) RETURN vec4_fixed;
    FUNCTION to_mat3_fixed (a : mat3_int) RETURN mat3_fixed;
    FUNCTION to_mat4_fixed (a : mat4_int) RETURN mat4_fixed;
    FUNCTION to_mat4_fixed (a : mat3_fixed) RETURN mat4_fixed;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- -- Perspective Projection
    -- FUNCTION perspective (left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed;
    -- -- Orthographic Projection
    -- FUNCTION orthographic (left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed;
    -- -- Look at function for the view matrix
    -- FUNCTION look_at (eye, at, up : vec3_int) RETURN mat4_fixed;

    -- --------------------------------------------------------------------
    --                Constants
    -- --------------------------------------------------------------------
    -- CONSTANT fixed_zero : fixed := "00000000000000000000000000000000";
    -- CONSTANT fixed_one : fixed := "00111111100000000000000000000000";
    -- CONSTANT fixed_neg_one : fixed := "10111111100000000000000000000000";
    CONSTANT fixed_zero : fixed := 0;
    CONSTANT fixed_one : fixed := fixed_scale_factor;
    CONSTANT fixed_neg_one : fixed := - fixed_scale_factor;

    CONSTANT vec2_int_zero : vec2_int := (0, 0);
    CONSTANT vec2_int_one : vec2_int := (1, 1);
    CONSTANT vec2_int_neg_one : vec2_int := (-1, -1);

    CONSTANT vec2_fixed_zero : vec2_fixed := (fixed_zero, fixed_zero);
    CONSTANT vec2_fixed_one : vec2_fixed := (fixed_one, fixed_one);
    CONSTANT vec2_fixed_neg_one : vec2_fixed := (fixed_neg_one, fixed_neg_one);

    CONSTANT vec3_int_zero : vec3_int := (0, 0, 0);
    CONSTANT vec3_int_one : vec3_int := (1, 1, 1);
    CONSTANT vec3_int_neg_one : vec3_int := (-1, -1, -1);

    -- CONSTANT vec3_fixed_zero : vec3_fixed := (fixed_zero, fixed_zero, fixed_zero);
    -- CONSTANT vec3_fixed_one : vec3_fixed := (fixed_one, fixed_one, fixed_one);
    -- CONSTANT vec3_fixed_neg_one : vec3_fixed := (fixed_neg_one, fixed_neg_one, fixed_neg_one);

    CONSTANT vec4_int_zero : vec4_int := (0, 0, 0, 0);
    CONSTANT vec4_int_one : vec4_int := (1, 1, 1, 1);
    CONSTANT vec4_int_neg_one : vec4_int := (-1, -1, -1, -1);

    CONSTANT vec4_fixed_zero : vec4_fixed := (fixed_zero, fixed_zero, fixed_zero, fixed_zero);
    CONSTANT vec4_fixed_one : vec4_fixed := (fixed_one, fixed_one, fixed_one, fixed_one);
    CONSTANT vec4_fixed_neg_one : vec4_fixed := (fixed_neg_one, fixed_neg_one, fixed_neg_one, fixed_neg_one);

    CONSTANT identity_mat3_int : mat3_int := ((1, 0, 0), (0, 1, 0), (0, 0, 1));
    CONSTANT identity_mat4_int : mat4_int := ((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1));
    CONSTANT identity_mat3_fixed : mat3_fixed := (
    (fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one)
    );
    CONSTANT identity_mat4_fixed : mat4_fixed := (
    (fixed_one, fixed_zero, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    );
    -- CONSTANT default_perspective_mat4_fixed : mat4_fixed := (
    -- ("00111111110111011011001111010111", fixed_zero, fixed_one, fixed_zero),
    --     (fixed_zero, "00111111110111011011001111010111", fixed_neg_one, fixed_zero),
    --     (fixed_zero, fixed_zero, "00111111100000000000000001010100", fixed_neg_one),
    --     (fixed_zero, fixed_zero, "10111101110011001101001000001011", fixed_zero)
    -- );
    CONSTANT default_perspective_mat4_fixed : mat4_fixed := (
    (887, fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, 887, fixed_neg_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_neg_one),
        (fixed_zero, fixed_zero, -51, fixed_zero)
    );
    -- CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    -- ("00111011000000000000000000000000", fixed_zero, fixed_zero, fixed_neg_one),
    --     (fixed_zero, "00111011010110100111010000001110", fixed_zero, fixed_neg_one),
    --     (fixed_zero, fixed_zero, "10111001010100011011110001110110", "10111111100000000000011010001110"),
    --     (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    -- );
    CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    (1, fixed_zero, fixed_zero, fixed_neg_one),
        (fixed_zero, 2, fixed_zero, fixed_neg_one),
        (fixed_zero, fixed_zero, 0, 0),
        (fixed_zero, fixed_zero, fixed_zero, -512)
    );
    CONSTANT look_forward_mat4_fixed : mat4_fixed := (
    (fixed_one, fixed_zero, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    );

    -- --------------------------------------------------------------------
    --               Transformation
    -- --------------------------------------------------------------------
    -- Translation
    FUNCTION translation_mat4_fixed (displacement : vec3_int) RETURN mat4_fixed;
    -- Rotation
    FUNCTION rotation_mat4_fixed (euler : vec3_int) RETURN mat4_fixed;
    -- Scaling
    FUNCTION scaling_mat4_fixed (scale : vec3_int) RETURN mat4_fixed;

END PACKAGE;

PACKAGE BODY math3D_pkg IS
    -- --------------------------------------------------------------------
    --            Trigonometric Func
    -- --------------------------------------------------------------------
    FUNCTION sin_fixed (x : INTEGER) RETURN fixed IS
    BEGIN
        IF x < 0 THEN
            RETURN -sin_table(-x MOD 360);
        ELSE
            RETURN sin_table(x MOD 360);
        END IF;
    END sin_fixed;

    FUNCTION cos_fixed (x : INTEGER) RETURN fixed IS
    BEGIN
        IF x < 0 THEN
            RETURN cos_table(-x MOD 360);
        ELSE
            RETURN cos_table(x MOD 360);
        END IF;
    END cos_fixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        result(3) := a(3) * b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        result(3) := a(3) / b;
        RETURN result;
    END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- fixed type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_fixed) RETURN fixed IS
        VARIABLE result : fixed;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_fixed; b : fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        result(0) := mult_fixed(a(0), b);
        result(1) := mult_fixed(a(1), b);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_fixed; b : fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        result(0) := div_fixed(a(0), b);
        result(1) := div_fixed(a(1), b);
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_fixed) RETURN fixed IS
        VARIABLE result : fixed;
    BEGIN
        -- result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        result := mult_fixed(a(0), b(0)) + mult_fixed(a(1), b(1)) + mult_fixed(a(2), b(2));
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_fixed; b : fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        -- result(2) := a(2) * b;
        result(0) := mult_fixed(a(0), b);
        result(1) := mult_fixed(a(1), b);
        result(2) := mult_fixed(a(2), b);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_fixed; b : fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        -- result(2) := a(2) / b;
        result(0) := div_fixed(a(0), b);
        result(1) := div_fixed(a(1), b);
        result(2) := div_fixed(a(2), b);
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_fixed) RETURN fixed IS
        VARIABLE result : fixed;
    BEGIN
        -- result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        result := mult_fixed(a(0), b(0)) + mult_fixed(a(1), b(1)) + mult_fixed(a(2), b(2)) + mult_fixed(a(3), b(3));
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_fixed; b : fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        -- result(0) := a(0) * b;
        -- result(1) := a(1) * b;
        -- result(2) := a(2) * b;
        -- result(3) := a(3) * b;
        result(0) := mult_fixed(a(0), b);
        result(1) := mult_fixed(a(1), b);
        result(2) := mult_fixed(a(2), b);
        result(3) := mult_fixed(a(3), b);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_fixed; b : fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        -- result(0) := a(0) / b;
        -- result(1) := a(1) / b;
        -- result(2) := a(2) / b;
        -- result(3) := a(3) / b;
        result(0) := div_fixed(a(0), b);
        result(1) := div_fixed(a(1), b);
        result(2) := div_fixed(a(2), b);
        result(3) := div_fixed(a(3), b);
        RETURN result;
    END FUNCTION;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_fixed; b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        -- result(0) := (a(1) * b(2)) - (a(2) * b(1));
        -- result(1) := (a(2) * b(0)) - (a(0) * b(2));
        -- result(2) := (a(0) * b(1)) - (a(1) * b(0));
        result(0) := mult_fixed(a(1), b(2)) - mult_fixed(a(2), b(1));
        result(1) := mult_fixed(a(2), b(0)) - mult_fixed(a(0), b(2));
        result(2) := mult_fixed(a(0), b(1)) - mult_fixed(a(1), b(0));
        RETURN result;
    END FUNCTION;

    -- -- Vector Length
    -- FUNCTION length (a : vec2_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt(1);
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec3_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec4_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)) + (a(3) * a(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Distance
    -- FUNCTION distance (a, b : vec2_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec3_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec4_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)) + (a(3) - b(3)) * (a(3) - b(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Nomalization
    -- FUNCTION normalize (a : vec2_fixed) RETURN vec2_fixed IS
    --     VARIABLE result : vec2_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec3_fixed) RETURN vec3_fixed IS
    --     VARIABLE result : vec3_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec4_fixed) RETURN vec4_fixed IS
    --     VARIABLE result : vec4_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2) + a(3) * a(3));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     result(3) := a(3) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := a(0)(0) + b(0)(0);
        result(0)(1) := a(0)(1) + b(0)(1);
        result(0)(2) := a(0)(2) + b(0)(2);

        result(1)(0) := a(1)(0) + b(1)(0);
        result(1)(1) := a(1)(1) + b(1)(1);
        result(1)(2) := a(1)(2) + b(1)(2);

        result(2)(0) := a(2)(0) + b(2)(0);
        result(2)(1) := a(2)(1) + b(2)(1);
        result(2)(2) := a(2)(2) + b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := a(0)(0) - b(0)(0);
        result(0)(1) := a(0)(1) - b(0)(1);
        result(0)(2) := a(0)(2) - b(0)(2);

        result(1)(0) := a(1)(0) - b(1)(0);
        result(1)(1) := a(1)(1) - b(1)(1);
        result(1)(2) := a(1)(2) - b(1)(2);

        result(2)(0) := a(2)(0) - b(2)(0);
        result(2)(1) := a(2)(1) - b(2)(1);
        result(2)(2) := a(2)(2) - b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        -- result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        -- result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        -- result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        -- result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        -- result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        -- result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        -- result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        -- result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        -- result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        result(0)(0) := mult_fixed(a(0)(0), b(0)(0)) + mult_fixed(a(0)(1), b(1)(0)) + mult_fixed(a(0)(2), b(2)(0));
        result(0)(1) := mult_fixed(a(0)(0), b(0)(1)) + mult_fixed(a(0)(1), b(1)(1)) + mult_fixed(a(0)(2), b(2)(1));
        result(0)(2) := mult_fixed(a(0)(0), b(0)(2)) + mult_fixed(a(0)(1), b(1)(2)) + mult_fixed(a(0)(2), b(2)(2));

        result(1)(0) := mult_fixed(a(1)(0), b(0)(0)) + mult_fixed(a(1)(1), b(1)(0)) + mult_fixed(a(1)(2), b(2)(0));
        result(1)(1) := mult_fixed(a(1)(0), b(0)(1)) + mult_fixed(a(1)(1), b(1)(1)) + mult_fixed(a(1)(2), b(2)(1));
        result(1)(2) := mult_fixed(a(1)(0), b(0)(2)) + mult_fixed(a(1)(1), b(1)(2)) + mult_fixed(a(1)(2), b(2)(2));

        result(2)(0) := mult_fixed(a(2)(0), b(0)(0)) + mult_fixed(a(2)(1), b(1)(0)) + mult_fixed(a(2)(2), b(2)(0));
        result(2)(1) := mult_fixed(a(2)(0), b(0)(1)) + mult_fixed(a(2)(1), b(1)(1)) + mult_fixed(a(2)(2), b(2)(1));
        result(2)(2) := mult_fixed(a(2)(0), b(0)(2)) + mult_fixed(a(2)(1), b(1)(2)) + mult_fixed(a(2)(2), b(2)(2));

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_fixed; b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        -- result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        -- result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        -- result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        result(0) := mult_fixed(a(0)(0), b(0)) + mult_fixed(a(0)(1), b(1)) + mult_fixed(a(0)(2), b(2));
        result(1) := mult_fixed(a(1)(0), b(0)) + mult_fixed(a(1)(1), b(1)) + mult_fixed(a(1)(2), b(2));
        result(2) := mult_fixed(a(2)(0), b(0)) + mult_fixed(a(2)(1), b(1)) + mult_fixed(a(2)(2), b(2));
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        -- result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        -- result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        -- result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        -- result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        -- result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        -- result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        -- result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        -- result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        -- result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        -- result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        -- result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        -- result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        -- result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        -- result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        -- result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        -- result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        result (0)(0) := mult_fixed(a(0)(0), b(0)(0)) + mult_fixed(a(0)(1), b(1)(0)) + mult_fixed(a(0)(2), b(2)(0)) + mult_fixed(a(0)(3), b(3)(0));
        result (0)(1) := mult_fixed(a(0)(0), b(0)(1)) + mult_fixed(a(0)(1), b(1)(1)) + mult_fixed(a(0)(2), b(2)(1)) + mult_fixed(a(0)(3), b(3)(1));
        result (0)(2) := mult_fixed(a(0)(0), b(0)(2)) + mult_fixed(a(0)(1), b(1)(2)) + mult_fixed(a(0)(2), b(2)(2)) + mult_fixed(a(0)(3), b(3)(2));
        result (0)(3) := mult_fixed(a(0)(0), b(0)(3)) + mult_fixed(a(0)(1), b(1)(3)) + mult_fixed(a(0)(2), b(2)(3)) + mult_fixed(a(0)(3), b(3)(3));

        result (1)(0) := mult_fixed(a(1)(0), b(0)(0)) + mult_fixed(a(1)(1), b(1)(0)) + mult_fixed(a(1)(2), b(2)(0)) + mult_fixed(a(1)(3), b(3)(0));
        result (1)(1) := mult_fixed(a(1)(0), b(0)(1)) + mult_fixed(a(1)(1), b(1)(1)) + mult_fixed(a(1)(2), b(2)(1)) + mult_fixed(a(1)(3), b(3)(1));
        result (1)(2) := mult_fixed(a(1)(0), b(0)(2)) + mult_fixed(a(1)(1), b(1)(2)) + mult_fixed(a(1)(2), b(2)(2)) + mult_fixed(a(1)(3), b(3)(2));
        result (1)(3) := mult_fixed(a(1)(0), b(0)(3)) + mult_fixed(a(1)(1), b(1)(3)) + mult_fixed(a(1)(2), b(2)(3)) + mult_fixed(a(1)(3), b(3)(3));

        result (2)(0) := mult_fixed(a(2)(0), b(0)(0)) + mult_fixed(a(2)(1), b(1)(0)) + mult_fixed(a(2)(2), b(2)(0)) + mult_fixed(a(2)(3), b(3)(0));
        result (2)(1) := mult_fixed(a(2)(0), b(0)(1)) + mult_fixed(a(2)(1), b(1)(1)) + mult_fixed(a(2)(2), b(2)(1)) + mult_fixed(a(2)(3), b(3)(1));
        result (2)(2) := mult_fixed(a(2)(0), b(0)(2)) + mult_fixed(a(2)(1), b(1)(2)) + mult_fixed(a(2)(2), b(2)(2)) + mult_fixed(a(2)(3), b(3)(2));
        result (2)(3) := mult_fixed(a(2)(0), b(0)(3)) + mult_fixed(a(2)(1), b(1)(3)) + mult_fixed(a(2)(2), b(2)(3)) + mult_fixed(a(2)(3), b(3)(3));

        result (3)(0) := mult_fixed(a(3)(0), b(0)(0)) + mult_fixed(a(3)(1), b(1)(0)) + mult_fixed(a(3)(2), b(2)(0)) + mult_fixed(a(3)(3), b(3)(0));
        result (3)(1) := mult_fixed(a(3)(0), b(0)(1)) + mult_fixed(a(3)(1), b(1)(1)) + mult_fixed(a(3)(2), b(2)(1)) + mult_fixed(a(3)(3), b(3)(1));
        result (3)(2) := mult_fixed(a(3)(0), b(0)(2)) + mult_fixed(a(3)(1), b(1)(2)) + mult_fixed(a(3)(2), b(2)(2)) + mult_fixed(a(3)(3), b(3)(2));
        result (3)(3) := mult_fixed(a(3)(0), b(0)(3)) + mult_fixed(a(3)(1), b(1)(3)) + mult_fixed(a(3)(2), b(2)(3)) + mult_fixed(a(3)(3), b(3)(3));

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_fixed; b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        -- result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        -- result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        -- result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        -- result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);

        result(0) := mult_fixed(a(0)(0), b(0)) + mult_fixed(a(0)(1), b(1)) + mult_fixed(a(0)(2), b(2)) + mult_fixed(a(0)(3), b(3));
        result(1) := mult_fixed(a(1)(0), b(0)) + mult_fixed(a(1)(1), b(1)) + mult_fixed(a(1)(2), b(2)) + mult_fixed(a(1)(3), b(3));
        result(2) := mult_fixed(a(2)(0), b(0)) + mult_fixed(a(2)(1), b(1)) + mult_fixed(a(2)(2), b(2)) + mult_fixed(a(2)(3), b(3));
        result(3) := mult_fixed(a(3)(0), b(0)) + mult_fixed(a(3)(1), b(1)) + mult_fixed(a(3)(2), b(2)) + mult_fixed(a(3)(3), b(3));

        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_fixed) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec3_fixed) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int(a : vec4_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec4_fixed) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        result(3) := to_integer(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_int (a : mat3_fixed) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat4_fixed) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));
        result(0)(3) := to_integer(a(0)(3));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));
        result(1)(3) := to_integer(a(1)(3));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        result(2)(3) := to_integer(a(2)(3));

        result(3)(0) := to_integer(a(3)(0));
        result(3)(1) := to_integer(a(3)(1));
        result(3)(2) := to_integer(a(3)(2));
        result(3)(3) := to_integer(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := 0;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := 0;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := 0;

        result(3)(0) := 0;
        result(3)(1) := 0;
        result(3)(2) := 0;
        result(3)(3) := 1;
        RETURN result;
    END FUNCTION;

    -- To fixed type
    FUNCTION to_vec2_fixed (a : vec2_int) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := to_fixed(a(0));
        result(1) := to_fixed(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_fixed (a : vec3_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec3_int) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := to_fixed(a(0));
        result(1) := to_fixed(a(1));
        result(2) := to_fixed(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec2_fixed; w : fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec4_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_fixed (a : vec4_int) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := to_fixed(a(0));
        result(1) := to_fixed(a(1));
        result(2) := to_fixed(a(2));
        result(3) := to_fixed(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_fixed (a : vec3_fixed; w : fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_fixed (a : mat3_int) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := to_fixed(a(0)(0));
        result(0)(1) := to_fixed(a(0)(1));
        result(0)(2) := to_fixed(a(0)(2));

        result(1)(0) := to_fixed(a(1)(0));
        result(1)(1) := to_fixed(a(1)(1));
        result(1)(2) := to_fixed(a(1)(2));

        result(2)(0) := to_fixed(a(2)(0));
        result(2)(1) := to_fixed(a(2)(1));
        result(2)(2) := to_fixed(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_fixed (a : mat4_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0)(0) := to_fixed(a(0)(0));
        result(0)(1) := to_fixed(a(0)(1));
        result(0)(2) := to_fixed(a(0)(2));
        result(0)(3) := to_fixed(a(0)(3));

        result(1)(0) := to_fixed(a(1)(0));
        result(1)(1) := to_fixed(a(1)(1));
        result(1)(2) := to_fixed(a(1)(2));
        result(1)(3) := to_fixed(a(1)(3));

        result(2)(0) := to_fixed(a(2)(0));
        result(2)(1) := to_fixed(a(2)(1));
        result(2)(2) := to_fixed(a(2)(2));
        result(2)(3) := to_fixed(a(2)(3));

        result(3)(0) := to_fixed(a(3)(0));
        result(3)(1) := to_fixed(a(3)(1));
        result(3)(2) := to_fixed(a(3)(2));
        result(3)(3) := to_fixed(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_fixed (a : mat3_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := fixed_zero;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := fixed_zero;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := fixed_zero;

        result(3)(0) := fixed_zero;
        result(3)(1) := fixed_zero;
        result(3)(2) := fixed_zero;
        result(3)(3) := fixed_one;
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --                Transform
    -- --------------------------------------------------------------------
    -- Translate
    FUNCTION translation_mat4_fixed (displacement : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result := identity_mat4_fixed;
        result(0)(3) := to_fixed(displacement(0));
        result(1)(3) := to_fixed(displacement(1));
        result(2)(3) := to_fixed(displacement(2));
        RETURN result;
    END FUNCTION;

    -- Rotation
    FUNCTION rotation_mat4_fixed (euler : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
        VARIABLE a, b, c, d, e, f, g, h, i : INTEGER;
        VARIABLE cos_x, cos_y, cos_z, sin_x, sin_y, sin_z : INTEGER;
    BEGIN
        result := identity_mat4_fixed;

        cos_x := cos_fixed(euler(0));
        cos_y := cos_fixed(euler(1));
        cos_z := cos_fixed(euler(2));
        sin_x := sin_fixed(euler(0));
        sin_y := sin_fixed(euler(1));
        sin_z := sin_fixed(euler(2));

        a := cos_y * cos_z;
        b := cos_y * sin_z;
        c := - sin_y;
        d := (sin_x * sin_y * cos_z) - (cos_x * sin_z);
        e := sin_x * sin_y * sin_z + cos_x * cos_z;
        f := sin_x * cos_y;
        g := cos_x * sin_y * cos_z + sin_x * sin_z;
        h := cos_x * sin_y * sin_z - sin_x * cos_z;
        i := cos_x * cos_y;

        result(0)(0) := a;
        result(0)(1) := b;
        result(0)(2) := c;
        result(1)(0) := d;
        result(1)(1) := e;
        result(1)(2) := f;
        result(2)(0) := g;
        result(2)(1) := h;
        result(2)(2) := i;

        RETURN result;
    END FUNCTION;

    -- Scaling
    FUNCTION scaling_mat4_fixed (scale : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result := identity_mat4_fixed;
        result(0)(0) := to_fixed(scale(0));
        result(1)(1) := to_fixed(scale(1));
        result(2)(2) := to_fixed(scale(2));
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- -- Perspective Projection
    -- FUNCTION perspective(left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE l, r, b, t, n, f : INTEGER;
    -- BEGIN
    --     l := to_fixed(left);
    --     r := to_fixed(right);
    --     b := to_fixed(bottom);
    --     t := to_fixed(top);
    --     n := to_fixed(near);
    --     f := to_fixed(far);

    --     result(0)(0) := (n * 2) / (r - l);
    --     result(0)(1) := to_fixed(0.0);
    --     result(0)(2) := (r + l) / (r - l);
    --     result(0)(3) := to_fixed(0.0);

    --     result(1)(0) := to_fixed(0.0);
    --     result(1)(1) := (2 * n) / (t - b);
    --     result(1)(2) := (t + b) / (t - b);
    --     result(1)(3) := to_fixed(0.0);

    --     result(2)(0) := to_fixed(0.0);
    --     result(2)(1) := to_fixed(0.0);
    --     result(2)(2) := - 1.0 * (f + n) / (f - n);
    --     result(2)(3) := - 1.0 * (2 * f * n) / (f - n);

    --     result(3)(0) := to_fixed(0.0);
    --     result(3)(1) := to_fixed(0.0);
    --     result(3)(2) := to_fixed(-1.0);
    --     result(3)(3) := to_fixed(0.0);

    --     RETURN result;
    -- END FUNCTION;

    -- -- Orthographic Projection
    -- FUNCTION orthographic(left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE l, r, b, t, n, f : INTEGER;
    -- BEGIN
    --     l := to_fixed(left);
    --     r := to_fixed(right);
    --     b := to_fixed(bottom);
    --     t := to_fixed(top);
    --     n := to_fixed(near);
    --     f := to_fixed(far);

    --     result(0)(0) := to_fixed(2.0) / (r - l);
    --     result(0)(1) := to_fixed(0.0);
    --     result(0)(2) := to_fixed(0.0);
    --     result(0)(3) := to_fixed(-1.0) * (r + l) / (r - l);

    --     result(1)(0) := to_fixed(0.0);
    --     result(1)(1) := to_fixed(2.0) / (t - b);
    --     result(1)(2) := to_fixed(0.0);
    --     result(1)(3) := to_fixed(-1.0) * (t + b) / (t - b);

    --     result(2)(0) := to_fixed(0.0);
    --     result(2)(1) := to_fixed(0.0);
    --     result(2)(2) := to_fixed(-2.0) / (f - n);
    --     result(2)(3) := to_fixed(-1.0) * (f + n) / (f - n);

    --     result(3)(0) := to_fixed(0.0);
    --     result(3)(1) := to_fixed(0.0);
    --     result(3)(2) := to_fixed(0.0);
    --     result(3)(3) := to_fixed(1.0);

    --     RETURN result;
    -- END FUNCTION;

    -- -- LookAt
    -- FUNCTION look_at(eye, at, up : vec3_int) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE f, s, u : vec3_fixed;
    -- BEGIN
    --     f := normalize(to_vec3_fixed(at - eye));
    --     s := normalize(cross(f, to_vec3_fixed(up)));
    --     u := cross(s, f);

    --     result(0)(0) := s(0);
    --     result(0)(1) := u(0);
    --     result(0)(2) := - f(0);
    --     result(0)(3) := fixed_zero;

    --     result(1)(0) := s(1);
    --     result(1)(1) := u(1);
    --     result(1)(2) := - f(1);
    --     result(1)(3) := fixed_zero;

    --     result(2)(0) := s(2);
    --     result(2)(1) := u(2);
    --     result(2)(2) := - f(2);
    --     result(2)(3) := fixed_zero;

    --     result(3)(0) := fixed_zero;
    --     result(3)(1) := fixed_zero;
    --     result(3)(2) := fixed_zero;
    --     result(3)(3) := fixed_one;

    --     RETURN result;
    -- END FUNCTION;
END PACKAGE BODY;