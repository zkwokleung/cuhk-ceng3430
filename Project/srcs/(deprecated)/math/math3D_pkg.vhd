LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
USE ieee.fixed_pkg.ALL;

PACKAGE math3D_pkg IS
    -- --------------------------------------------------------------------
    --               Trigonometry
    -- -------------------------------------------------------------------- 
    TYPE t_trig_table IS ARRAY (0 TO 359) OF sfixed(22 DOWNTO -8);

    -- The lookup table for sine
    CONSTANT sin_table : t_trig_table := (
        to_sfixed(0.0, 22, -8),
        to_sfixed(0.01745240643728351, 22, -8),
        to_sfixed(0.03489949670250097, 22, -8),
        to_sfixed(0.052335956242943835, 22, -8),
        to_sfixed(0.0697564737441253, 22, -8),
        to_sfixed(0.08715574274765817, 22, -8),
        to_sfixed(0.10452846326765347, 22, -8),
        to_sfixed(0.12186934340514748, 22, -8),
        to_sfixed(0.13917310096006544, 22, -8),
        to_sfixed(0.15643446504023087, 22, -8),
        to_sfixed(0.17364817766693033, 22, -8),
        to_sfixed(0.1908089953765448, 22, -8),
        to_sfixed(0.20791169081775934, 22, -8),
        to_sfixed(0.224951054343865, 22, -8),
        to_sfixed(0.24192189559966773, 22, -8),
        to_sfixed(0.25881904510252074, 22, -8),
        to_sfixed(0.27563735581699916, 22, -8),
        to_sfixed(0.29237170472273677, 22, -8),
        to_sfixed(0.3090169943749474, 22, -8),
        to_sfixed(0.3255681544571567, 22, -8),
        to_sfixed(0.3420201433256687, 22, -8),
        to_sfixed(0.35836794954530027, 22, -8),
        to_sfixed(0.374606593415912, 22, -8),
        to_sfixed(0.39073112848927377, 22, -8),
        to_sfixed(0.4067366430758002, 22, -8),
        to_sfixed(0.42261826174069944, 22, -8),
        to_sfixed(0.4383711467890774, 22, -8),
        to_sfixed(0.45399049973954675, 22, -8),
        to_sfixed(0.4694715627858908, 22, -8),
        to_sfixed(0.48480962024633706, 22, -8),
        to_sfixed(0.49999999999999994, 22, -8),
        to_sfixed(0.5150380749100542, 22, -8),
        to_sfixed(0.5299192642332049, 22, -8),
        to_sfixed(0.5446390350150271, 22, -8),
        to_sfixed(0.5591929034707469, 22, -8),
        to_sfixed(0.573576436351046, 22, -8),
        to_sfixed(0.5877852522924731, 22, -8),
        to_sfixed(0.6018150231520483, 22, -8),
        to_sfixed(0.6156614753256583, 22, -8),
        to_sfixed(0.6293203910498374, 22, -8),
        to_sfixed(0.6427876096865393, 22, -8),
        to_sfixed(0.6560590289905073, 22, -8),
        to_sfixed(0.6691306063588582, 22, -8),
        to_sfixed(0.6819983600624985, 22, -8),
        to_sfixed(0.6946583704589973, 22, -8),
        to_sfixed(0.7071067811865476, 22, -8),
        to_sfixed(0.7193398003386512, 22, -8),
        to_sfixed(0.7313537016191705, 22, -8),
        to_sfixed(0.7431448254773942, 22, -8),
        to_sfixed(0.754709580222772, 22, -8),
        to_sfixed(0.766044443118978, 22, -8),
        to_sfixed(0.7771459614569709, 22, -8),
        to_sfixed(0.788010753606722, 22, -8),
        to_sfixed(0.7986355100472928, 22, -8),
        to_sfixed(0.8090169943749475, 22, -8),
        to_sfixed(0.8191520442889918, 22, -8),
        to_sfixed(0.8290375725550417, 22, -8),
        to_sfixed(0.838670567945424, 22, -8),
        to_sfixed(0.8480480961564261, 22, -8),
        to_sfixed(0.8571673007021123, 22, -8),
        to_sfixed(0.8660254037844386, 22, -8),
        to_sfixed(0.8746197071393957, 22, -8),
        to_sfixed(0.8829475928589269, 22, -8),
        to_sfixed(0.8910065241883678, 22, -8),
        to_sfixed(0.898794046299167, 22, -8),
        to_sfixed(0.9063077870366499, 22, -8),
        to_sfixed(0.9135454576426009, 22, -8),
        to_sfixed(0.9205048534524404, 22, -8),
        to_sfixed(0.9271838545667874, 22, -8),
        to_sfixed(0.9335804264972017, 22, -8),
        to_sfixed(0.9396926207859083, 22, -8),
        to_sfixed(0.9455185755993167, 22, -8),
        to_sfixed(0.9510565162951535, 22, -8),
        to_sfixed(0.9563047559630354, 22, -8),
        to_sfixed(0.9612616959383189, 22, -8),
        to_sfixed(0.9659258262890683, 22, -8),
        to_sfixed(0.9702957262759965, 22, -8),
        to_sfixed(0.9743700647852352, 22, -8),
        to_sfixed(0.9781476007338056, 22, -8),
        to_sfixed(0.981627183447664, 22, -8),
        to_sfixed(0.984807753012208, 22, -8),
        to_sfixed(0.9876883405951378, 22, -8),
        to_sfixed(0.9902680687415704, 22, -8),
        to_sfixed(0.992546151641322, 22, -8),
        to_sfixed(0.9945218953682733, 22, -8),
        to_sfixed(0.9961946980917455, 22, -8),
        to_sfixed(0.9975640502598242, 22, -8),
        to_sfixed(0.9986295347545738, 22, -8),
        to_sfixed(0.9993908270190958, 22, -8),
        to_sfixed(0.9998476951563913, 22, -8),
        to_sfixed(1.0, 22, -8),
        to_sfixed(0.9998476951563913, 22, -8),
        to_sfixed(0.9993908270190958, 22, -8),
        to_sfixed(0.9986295347545738, 22, -8),
        to_sfixed(0.9975640502598242, 22, -8),
        to_sfixed(0.9961946980917455, 22, -8),
        to_sfixed(0.9945218953682733, 22, -8),
        to_sfixed(0.9925461516413221, 22, -8),
        to_sfixed(0.9902680687415704, 22, -8),
        to_sfixed(0.9876883405951378, 22, -8),
        to_sfixed(0.984807753012208, 22, -8),
        to_sfixed(0.981627183447664, 22, -8),
        to_sfixed(0.9781476007338057, 22, -8),
        to_sfixed(0.9743700647852352, 22, -8),
        to_sfixed(0.9702957262759965, 22, -8),
        to_sfixed(0.9659258262890683, 22, -8),
        to_sfixed(0.9612616959383189, 22, -8),
        to_sfixed(0.9563047559630355, 22, -8),
        to_sfixed(0.9510565162951536, 22, -8),
        to_sfixed(0.9455185755993168, 22, -8),
        to_sfixed(0.9396926207859084, 22, -8),
        to_sfixed(0.9335804264972017, 22, -8),
        to_sfixed(0.9271838545667874, 22, -8),
        to_sfixed(0.9205048534524403, 22, -8),
        to_sfixed(0.9135454576426009, 22, -8),
        to_sfixed(0.90630778703665, 22, -8),
        to_sfixed(0.8987940462991669, 22, -8),
        to_sfixed(0.8910065241883679, 22, -8),
        to_sfixed(0.8829475928589269, 22, -8),
        to_sfixed(0.8746197071393959, 22, -8),
        to_sfixed(0.8660254037844387, 22, -8),
        to_sfixed(0.8571673007021123, 22, -8),
        to_sfixed(0.8480480961564261, 22, -8),
        to_sfixed(0.838670567945424, 22, -8),
        to_sfixed(0.8290375725550417, 22, -8),
        to_sfixed(0.8191520442889917, 22, -8),
        to_sfixed(0.8090169943749475, 22, -8),
        to_sfixed(0.7986355100472927, 22, -8),
        to_sfixed(0.788010753606722, 22, -8),
        to_sfixed(0.777145961456971, 22, -8),
        to_sfixed(0.766044443118978, 22, -8),
        to_sfixed(0.7547095802227721, 22, -8),
        to_sfixed(0.7431448254773942, 22, -8),
        to_sfixed(0.7313537016191706, 22, -8),
        to_sfixed(0.7193398003386511, 22, -8),
        to_sfixed(0.7071067811865476, 22, -8),
        to_sfixed(0.6946583704589971, 22, -8),
        to_sfixed(0.6819983600624985, 22, -8),
        to_sfixed(0.6691306063588583, 22, -8),
        to_sfixed(0.6560590289905073, 22, -8),
        to_sfixed(0.6427876096865395, 22, -8),
        to_sfixed(0.6293203910498374, 22, -8),
        to_sfixed(0.6156614753256584, 22, -8),
        to_sfixed(0.6018150231520482, 22, -8),
        to_sfixed(0.5877852522924732, 22, -8),
        to_sfixed(0.5735764363510459, 22, -8),
        to_sfixed(0.5591929034707469, 22, -8),
        to_sfixed(0.5446390350150273, 22, -8),
        to_sfixed(0.5299192642332049, 22, -8),
        to_sfixed(0.5150380749100544, 22, -8),
        to_sfixed(0.49999999999999994, 22, -8),
        to_sfixed(0.48480962024633717, 22, -8),
        to_sfixed(0.4694715627858907, 22, -8),
        to_sfixed(0.45399049973954686, 22, -8),
        to_sfixed(0.4383711467890773, 22, -8),
        to_sfixed(0.4226182617406995, 22, -8),
        to_sfixed(0.40673664307580043, 22, -8),
        to_sfixed(0.39073112848927377, 22, -8),
        to_sfixed(0.37460659341591224, 22, -8),
        to_sfixed(0.3583679495453002, 22, -8),
        to_sfixed(0.3420201433256689, 22, -8),
        to_sfixed(0.3255681544571566, 22, -8),
        to_sfixed(0.3090169943749475, 22, -8),
        to_sfixed(0.2923717047227366, 22, -8),
        to_sfixed(0.2756373558169992, 22, -8),
        to_sfixed(0.258819045102521, 22, -8),
        to_sfixed(0.24192189559966773, 22, -8),
        to_sfixed(0.2249510543438652, 22, -8),
        to_sfixed(0.20791169081775931, 22, -8),
        to_sfixed(0.19080899537654497, 22, -8),
        to_sfixed(0.17364817766693028, 22, -8),
        to_sfixed(0.15643446504023098, 22, -8),
        to_sfixed(0.13917310096006533, 22, -8),
        to_sfixed(0.12186934340514755, 22, -8),
        to_sfixed(0.10452846326765373, 22, -8),
        to_sfixed(0.0871557427476582, 22, -8),
        to_sfixed(0.06975647374412552, 22, -8),
        to_sfixed(0.05233595624294381, 22, -8),
        to_sfixed(0.03489949670250114, 22, -8),
        to_sfixed(0.01745240643728344, 22, -8),
        to_sfixed(1.2246467991473532e-16, 22, -8),
        to_sfixed(-0.017452406437283637, 22, -8),
        to_sfixed(-0.0348994967025009, 22, -8),
        to_sfixed(-0.052335956242943564, 22, -8),
        to_sfixed(-0.06975647374412527, 22, -8),
        to_sfixed(-0.08715574274765794, 22, -8),
        to_sfixed(-0.1045284632676535, 22, -8),
        to_sfixed(-0.12186934340514731, 22, -8),
        to_sfixed(-0.13917310096006552, 22, -8),
        to_sfixed(-0.15643446504023073, 22, -8),
        to_sfixed(-0.17364817766693047, 22, -8),
        to_sfixed(-0.19080899537654472, 22, -8),
        to_sfixed(-0.2079116908177595, 22, -8),
        to_sfixed(-0.22495105434386498, 22, -8),
        to_sfixed(-0.2419218955996675, 22, -8),
        to_sfixed(-0.2588190451025208, 22, -8),
        to_sfixed(-0.275637355816999, 22, -8),
        to_sfixed(-0.29237170472273677, 22, -8),
        to_sfixed(-0.3090169943749473, 22, -8),
        to_sfixed(-0.32556815445715676, 22, -8),
        to_sfixed(-0.34202014332566866, 22, -8),
        to_sfixed(-0.35836794954530043, 22, -8),
        to_sfixed(-0.374606593415912, 22, -8),
        to_sfixed(-0.39073112848927355, 22, -8),
        to_sfixed(-0.4067366430758002, 22, -8),
        to_sfixed(-0.4226182617406993, 22, -8),
        to_sfixed(-0.43837114678907746, 22, -8),
        to_sfixed(-0.45399049973954664, 22, -8),
        to_sfixed(-0.46947156278589086, 22, -8),
        to_sfixed(-0.48480962024633695, 22, -8),
        to_sfixed(-0.5000000000000001, 22, -8),
        to_sfixed(-0.5150380749100542, 22, -8),
        to_sfixed(-0.5299192642332048, 22, -8),
        to_sfixed(-0.5446390350150271, 22, -8),
        to_sfixed(-0.5591929034707467, 22, -8),
        to_sfixed(-0.5735764363510462, 22, -8),
        to_sfixed(-0.587785252292473, 22, -8),
        to_sfixed(-0.6018150231520484, 22, -8),
        to_sfixed(-0.6156614753256582, 22, -8),
        to_sfixed(-0.6293203910498376, 22, -8),
        to_sfixed(-0.6427876096865393, 22, -8),
        to_sfixed(-0.656059028990507, 22, -8),
        to_sfixed(-0.6691306063588582, 22, -8),
        to_sfixed(-0.6819983600624984, 22, -8),
        to_sfixed(-0.6946583704589973, 22, -8),
        to_sfixed(-0.7071067811865475, 22, -8),
        to_sfixed(-0.7193398003386512, 22, -8),
        to_sfixed(-0.7313537016191705, 22, -8),
        to_sfixed(-0.7431448254773944, 22, -8),
        to_sfixed(-0.754709580222772, 22, -8),
        to_sfixed(-0.7660444431189779, 22, -8),
        to_sfixed(-0.7771459614569706, 22, -8),
        to_sfixed(-0.7880107536067221, 22, -8),
        to_sfixed(-0.7986355100472928, 22, -8),
        to_sfixed(-0.8090169943749473, 22, -8),
        to_sfixed(-0.8191520442889916, 22, -8),
        to_sfixed(-0.8290375725550418, 22, -8),
        to_sfixed(-0.8386705679454242, 22, -8),
        to_sfixed(-0.848048096156426, 22, -8),
        to_sfixed(-0.8571673007021121, 22, -8),
        to_sfixed(-0.8660254037844385, 22, -8),
        to_sfixed(-0.8746197071393959, 22, -8),
        to_sfixed(-0.882947592858927, 22, -8),
        to_sfixed(-0.8910065241883678, 22, -8),
        to_sfixed(-0.8987940462991668, 22, -8),
        to_sfixed(-0.9063077870366502, 22, -8),
        to_sfixed(-0.913545457642601, 22, -8),
        to_sfixed(-0.9205048534524403, 22, -8),
        to_sfixed(-0.9271838545667873, 22, -8),
        to_sfixed(-0.9335804264972016, 22, -8),
        to_sfixed(-0.9396926207859084, 22, -8),
        to_sfixed(-0.9455185755993168, 22, -8),
        to_sfixed(-0.9510565162951535, 22, -8),
        to_sfixed(-0.9563047559630353, 22, -8),
        to_sfixed(-0.961261695938319, 22, -8),
        to_sfixed(-0.9659258262890683, 22, -8),
        to_sfixed(-0.9702957262759965, 22, -8),
        to_sfixed(-0.9743700647852351, 22, -8),
        to_sfixed(-0.9781476007338056, 22, -8),
        to_sfixed(-0.981627183447664, 22, -8),
        to_sfixed(-0.984807753012208, 22, -8),
        to_sfixed(-0.9876883405951377, 22, -8),
        to_sfixed(-0.9902680687415703, 22, -8),
        to_sfixed(-0.9925461516413221, 22, -8),
        to_sfixed(-0.9945218953682734, 22, -8),
        to_sfixed(-0.9961946980917455, 22, -8),
        to_sfixed(-0.9975640502598242, 22, -8),
        to_sfixed(-0.9986295347545738, 22, -8),
        to_sfixed(-0.9993908270190958, 22, -8),
        to_sfixed(-0.9998476951563913, 22, -8),
        to_sfixed(-1.0, 22, -8),
        to_sfixed(-0.9998476951563913, 22, -8),
        to_sfixed(-0.9993908270190958, 22, -8),
        to_sfixed(-0.9986295347545738, 22, -8),
        to_sfixed(-0.9975640502598243, 22, -8),
        to_sfixed(-0.9961946980917455, 22, -8),
        to_sfixed(-0.9945218953682734, 22, -8),
        to_sfixed(-0.992546151641322, 22, -8),
        to_sfixed(-0.9902680687415704, 22, -8),
        to_sfixed(-0.9876883405951378, 22, -8),
        to_sfixed(-0.9848077530122081, 22, -8),
        to_sfixed(-0.9816271834476639, 22, -8),
        to_sfixed(-0.9781476007338056, 22, -8),
        to_sfixed(-0.9743700647852352, 22, -8),
        to_sfixed(-0.9702957262759966, 22, -8),
        to_sfixed(-0.9659258262890684, 22, -8),
        to_sfixed(-0.9612616959383188, 22, -8),
        to_sfixed(-0.9563047559630354, 22, -8),
        to_sfixed(-0.9510565162951536, 22, -8),
        to_sfixed(-0.945518575599317, 22, -8),
        to_sfixed(-0.9396926207859083, 22, -8),
        to_sfixed(-0.9335804264972017, 22, -8),
        to_sfixed(-0.9271838545667874, 22, -8),
        to_sfixed(-0.9205048534524405, 22, -8),
        to_sfixed(-0.9135454576426011, 22, -8),
        to_sfixed(-0.9063077870366498, 22, -8),
        to_sfixed(-0.898794046299167, 22, -8),
        to_sfixed(-0.891006524188368, 22, -8),
        to_sfixed(-0.8829475928589271, 22, -8),
        to_sfixed(-0.8746197071393956, 22, -8),
        to_sfixed(-0.8660254037844386, 22, -8),
        to_sfixed(-0.8571673007021123, 22, -8),
        to_sfixed(-0.8480480961564261, 22, -8),
        to_sfixed(-0.8386705679454243, 22, -8),
        to_sfixed(-0.8290375725550416, 22, -8),
        to_sfixed(-0.8191520442889918, 22, -8),
        to_sfixed(-0.8090169943749476, 22, -8),
        to_sfixed(-0.798635510047293, 22, -8),
        to_sfixed(-0.7880107536067218, 22, -8),
        to_sfixed(-0.7771459614569708, 22, -8),
        to_sfixed(-0.7660444431189781, 22, -8),
        to_sfixed(-0.7547095802227722, 22, -8),
        to_sfixed(-0.7431448254773946, 22, -8),
        to_sfixed(-0.7313537016191703, 22, -8),
        to_sfixed(-0.7193398003386511, 22, -8),
        to_sfixed(-0.7071067811865477, 22, -8),
        to_sfixed(-0.6946583704589976, 22, -8),
        to_sfixed(-0.6819983600624983, 22, -8),
        to_sfixed(-0.6691306063588581, 22, -8),
        to_sfixed(-0.6560590289905074, 22, -8),
        to_sfixed(-0.6427876096865396, 22, -8),
        to_sfixed(-0.6293203910498378, 22, -8),
        to_sfixed(-0.6156614753256582, 22, -8),
        to_sfixed(-0.6018150231520483, 22, -8),
        to_sfixed(-0.5877852522924734, 22, -8),
        to_sfixed(-0.5735764363510465, 22, -8),
        to_sfixed(-0.5591929034707466, 22, -8),
        to_sfixed(-0.544639035015027, 22, -8),
        to_sfixed(-0.529919264233205, 22, -8),
        to_sfixed(-0.5150380749100545, 22, -8),
        to_sfixed(-0.5000000000000004, 22, -8),
        to_sfixed(-0.4848096202463369, 22, -8),
        to_sfixed(-0.4694715627858908, 22, -8),
        to_sfixed(-0.45399049973954697, 22, -8),
        to_sfixed(-0.4383711467890778, 22, -8),
        to_sfixed(-0.4226182617406992, 22, -8),
        to_sfixed(-0.40673664307580015, 22, -8),
        to_sfixed(-0.3907311284892739, 22, -8),
        to_sfixed(-0.37460659341591235, 22, -8),
        to_sfixed(-0.35836794954530077, 22, -8),
        to_sfixed(-0.3420201433256686, 22, -8),
        to_sfixed(-0.3255681544571567, 22, -8),
        to_sfixed(-0.3090169943749477, 22, -8),
        to_sfixed(-0.29237170472273716, 22, -8),
        to_sfixed(-0.27563735581699894, 22, -8),
        to_sfixed(-0.2588190451025207, 22, -8),
        to_sfixed(-0.24192189559966787, 22, -8),
        to_sfixed(-0.22495105434386534, 22, -8),
        to_sfixed(-0.20791169081775987, 22, -8),
        to_sfixed(-0.19080899537654467, 22, -8),
        to_sfixed(-0.1736481776669304, 22, -8),
        to_sfixed(-0.1564344650402311, 22, -8),
        to_sfixed(-0.13917310096006588, 22, -8),
        to_sfixed(-0.12186934340514723, 22, -8),
        to_sfixed(-0.10452846326765342, 22, -8),
        to_sfixed(-0.08715574274765832, 22, -8),
        to_sfixed(-0.06975647374412564, 22, -8),
        to_sfixed(-0.05233595624294437, 22, -8),
        to_sfixed(-0.034899496702500823, 22, -8),
        to_sfixed(-0.01745240643728356, 22, -8)
    );

    -- The lookup table for cosine
    CONSTANT cos_table : t_trig_table := (
        to_sfixed(1.0, 22, -8),
        to_sfixed(0.9998476951563913, 22, -8),
        to_sfixed(0.9993908270190958, 22, -8),
        to_sfixed(0.9986295347545738, 22, -8),
        to_sfixed(0.9975640502598242, 22, -8),
        to_sfixed(0.9961946980917455, 22, -8),
        to_sfixed(0.9945218953682733, 22, -8),
        to_sfixed(0.992546151641322, 22, -8),
        to_sfixed(0.9902680687415704, 22, -8),
        to_sfixed(0.9876883405951378, 22, -8),
        to_sfixed(0.984807753012208, 22, -8),
        to_sfixed(0.981627183447664, 22, -8),
        to_sfixed(0.9781476007338057, 22, -8),
        to_sfixed(0.9743700647852352, 22, -8),
        to_sfixed(0.9702957262759965, 22, -8),
        to_sfixed(0.9659258262890683, 22, -8),
        to_sfixed(0.9612616959383189, 22, -8),
        to_sfixed(0.9563047559630354, 22, -8),
        to_sfixed(0.9510565162951535, 22, -8),
        to_sfixed(0.9455185755993168, 22, -8),
        to_sfixed(0.9396926207859084, 22, -8),
        to_sfixed(0.9335804264972017, 22, -8),
        to_sfixed(0.9271838545667874, 22, -8),
        to_sfixed(0.9205048534524404, 22, -8),
        to_sfixed(0.9135454576426009, 22, -8),
        to_sfixed(0.9063077870366499, 22, -8),
        to_sfixed(0.898794046299167, 22, -8),
        to_sfixed(0.8910065241883679, 22, -8),
        to_sfixed(0.882947592858927, 22, -8),
        to_sfixed(0.8746197071393957, 22, -8),
        to_sfixed(0.8660254037844387, 22, -8),
        to_sfixed(0.8571673007021123, 22, -8),
        to_sfixed(0.848048096156426, 22, -8),
        to_sfixed(0.838670567945424, 22, -8),
        to_sfixed(0.8290375725550417, 22, -8),
        to_sfixed(0.8191520442889918, 22, -8),
        to_sfixed(0.8090169943749475, 22, -8),
        to_sfixed(0.7986355100472928, 22, -8),
        to_sfixed(0.7880107536067219, 22, -8),
        to_sfixed(0.7771459614569709, 22, -8),
        to_sfixed(0.766044443118978, 22, -8),
        to_sfixed(0.754709580222772, 22, -8),
        to_sfixed(0.7431448254773942, 22, -8),
        to_sfixed(0.7313537016191705, 22, -8),
        to_sfixed(0.7193398003386512, 22, -8),
        to_sfixed(0.7071067811865476, 22, -8),
        to_sfixed(0.6946583704589973, 22, -8),
        to_sfixed(0.6819983600624985, 22, -8),
        to_sfixed(0.6691306063588582, 22, -8),
        to_sfixed(0.6560590289905073, 22, -8),
        to_sfixed(0.6427876096865394, 22, -8),
        to_sfixed(0.6293203910498375, 22, -8),
        to_sfixed(0.6156614753256583, 22, -8),
        to_sfixed(0.6018150231520484, 22, -8),
        to_sfixed(0.5877852522924731, 22, -8),
        to_sfixed(0.573576436351046, 22, -8),
        to_sfixed(0.5591929034707468, 22, -8),
        to_sfixed(0.5446390350150271, 22, -8),
        to_sfixed(0.5299192642332049, 22, -8),
        to_sfixed(0.5150380749100542, 22, -8),
        to_sfixed(0.5000000000000001, 22, -8),
        to_sfixed(0.4848096202463371, 22, -8),
        to_sfixed(0.46947156278589086, 22, -8),
        to_sfixed(0.4539904997395468, 22, -8),
        to_sfixed(0.43837114678907746, 22, -8),
        to_sfixed(0.42261826174069944, 22, -8),
        to_sfixed(0.4067366430758002, 22, -8),
        to_sfixed(0.3907311284892737, 22, -8),
        to_sfixed(0.37460659341591196, 22, -8),
        to_sfixed(0.3583679495453004, 22, -8),
        to_sfixed(0.3420201433256688, 22, -8),
        to_sfixed(0.32556815445715676, 22, -8),
        to_sfixed(0.30901699437494745, 22, -8),
        to_sfixed(0.29237170472273677, 22, -8),
        to_sfixed(0.27563735581699916, 22, -8),
        to_sfixed(0.25881904510252074, 22, -8),
        to_sfixed(0.24192189559966767, 22, -8),
        to_sfixed(0.22495105434386492, 22, -8),
        to_sfixed(0.20791169081775945, 22, -8),
        to_sfixed(0.19080899537654492, 22, -8),
        to_sfixed(0.17364817766693041, 22, -8),
        to_sfixed(0.15643446504023092, 22, -8),
        to_sfixed(0.13917310096006547, 22, -8),
        to_sfixed(0.12186934340514749, 22, -8),
        to_sfixed(0.10452846326765346, 22, -8),
        to_sfixed(0.08715574274765814, 22, -8),
        to_sfixed(0.06975647374412523, 22, -8),
        to_sfixed(0.052335956242943966, 22, -8),
        to_sfixed(0.03489949670250108, 22, -8),
        to_sfixed(0.0174524064372836, 22, -8),
        to_sfixed(6.123233995736766e-17, 22, -8),
        to_sfixed(-0.017452406437283477, 22, -8),
        to_sfixed(-0.034899496702500955, 22, -8),
        to_sfixed(-0.05233595624294384, 22, -8),
        to_sfixed(-0.06975647374412533, 22, -8),
        to_sfixed(-0.08715574274765824, 22, -8),
        to_sfixed(-0.10452846326765355, 22, -8),
        to_sfixed(-0.12186934340514737, 22, -8),
        to_sfixed(-0.13917310096006535, 22, -8),
        to_sfixed(-0.1564344650402308, 22, -8),
        to_sfixed(-0.1736481776669303, 22, -8),
        to_sfixed(-0.1908089953765448, 22, -8),
        to_sfixed(-0.20791169081775934, 22, -8),
        to_sfixed(-0.22495105434386503, 22, -8),
        to_sfixed(-0.24192189559966779, 22, -8),
        to_sfixed(-0.25881904510252085, 22, -8),
        to_sfixed(-0.27563735581699905, 22, -8),
        to_sfixed(-0.29237170472273666, 22, -8),
        to_sfixed(-0.30901699437494734, 22, -8),
        to_sfixed(-0.32556815445715664, 22, -8),
        to_sfixed(-0.3420201433256687, 22, -8),
        to_sfixed(-0.35836794954530027, 22, -8),
        to_sfixed(-0.37460659341591207, 22, -8),
        to_sfixed(-0.3907311284892738, 22, -8),
        to_sfixed(-0.40673664307580026, 22, -8),
        to_sfixed(-0.42261826174069933, 22, -8),
        to_sfixed(-0.4383711467890775, 22, -8),
        to_sfixed(-0.45399049973954675, 22, -8),
        to_sfixed(-0.4694715627858909, 22, -8),
        to_sfixed(-0.484809620246337, 22, -8),
        to_sfixed(-0.4999999999999998, 22, -8),
        to_sfixed(-0.5150380749100543, 22, -8),
        to_sfixed(-0.5299192642332048, 22, -8),
        to_sfixed(-0.5446390350150271, 22, -8),
        to_sfixed(-0.5591929034707467, 22, -8),
        to_sfixed(-0.5735764363510462, 22, -8),
        to_sfixed(-0.587785252292473, 22, -8),
        to_sfixed(-0.6018150231520484, 22, -8),
        to_sfixed(-0.6156614753256583, 22, -8),
        to_sfixed(-0.6293203910498373, 22, -8),
        to_sfixed(-0.6427876096865394, 22, -8),
        to_sfixed(-0.6560590289905072, 22, -8),
        to_sfixed(-0.6691306063588582, 22, -8),
        to_sfixed(-0.6819983600624984, 22, -8),
        to_sfixed(-0.6946583704589974, 22, -8),
        to_sfixed(-0.7071067811865475, 22, -8),
        to_sfixed(-0.7193398003386513, 22, -8),
        to_sfixed(-0.7313537016191705, 22, -8),
        to_sfixed(-0.7431448254773941, 22, -8),
        to_sfixed(-0.754709580222772, 22, -8),
        to_sfixed(-0.7660444431189779, 22, -8),
        to_sfixed(-0.7771459614569709, 22, -8),
        to_sfixed(-0.7880107536067219, 22, -8),
        to_sfixed(-0.7986355100472929, 22, -8),
        to_sfixed(-0.8090169943749473, 22, -8),
        to_sfixed(-0.8191520442889919, 22, -8),
        to_sfixed(-0.8290375725550416, 22, -8),
        to_sfixed(-0.8386705679454239, 22, -8),
        to_sfixed(-0.848048096156426, 22, -8),
        to_sfixed(-0.8571673007021122, 22, -8),
        to_sfixed(-0.8660254037844387, 22, -8),
        to_sfixed(-0.8746197071393957, 22, -8),
        to_sfixed(-0.882947592858927, 22, -8),
        to_sfixed(-0.8910065241883678, 22, -8),
        to_sfixed(-0.898794046299167, 22, -8),
        to_sfixed(-0.9063077870366499, 22, -8),
        to_sfixed(-0.9135454576426008, 22, -8),
        to_sfixed(-0.9205048534524404, 22, -8),
        to_sfixed(-0.9271838545667873, 22, -8),
        to_sfixed(-0.9335804264972017, 22, -8),
        to_sfixed(-0.9396926207859083, 22, -8),
        to_sfixed(-0.9455185755993168, 22, -8),
        to_sfixed(-0.9510565162951535, 22, -8),
        to_sfixed(-0.9563047559630355, 22, -8),
        to_sfixed(-0.9612616959383189, 22, -8),
        to_sfixed(-0.9659258262890682, 22, -8),
        to_sfixed(-0.9702957262759965, 22, -8),
        to_sfixed(-0.9743700647852351, 22, -8),
        to_sfixed(-0.9781476007338057, 22, -8),
        to_sfixed(-0.981627183447664, 22, -8),
        to_sfixed(-0.984807753012208, 22, -8),
        to_sfixed(-0.9876883405951377, 22, -8),
        to_sfixed(-0.9902680687415704, 22, -8),
        to_sfixed(-0.992546151641322, 22, -8),
        to_sfixed(-0.9945218953682733, 22, -8),
        to_sfixed(-0.9961946980917455, 22, -8),
        to_sfixed(-0.9975640502598242, 22, -8),
        to_sfixed(-0.9986295347545738, 22, -8),
        to_sfixed(-0.9993908270190958, 22, -8),
        to_sfixed(-0.9998476951563913, 22, -8),
        to_sfixed(-1.0, 22, -8),
        to_sfixed(-0.9998476951563913, 22, -8),
        to_sfixed(-0.9993908270190958, 22, -8),
        to_sfixed(-0.9986295347545738, 22, -8),
        to_sfixed(-0.9975640502598242, 22, -8),
        to_sfixed(-0.9961946980917455, 22, -8),
        to_sfixed(-0.9945218953682733, 22, -8),
        to_sfixed(-0.9925461516413221, 22, -8),
        to_sfixed(-0.9902680687415703, 22, -8),
        to_sfixed(-0.9876883405951378, 22, -8),
        to_sfixed(-0.984807753012208, 22, -8),
        to_sfixed(-0.981627183447664, 22, -8),
        to_sfixed(-0.9781476007338056, 22, -8),
        to_sfixed(-0.9743700647852352, 22, -8),
        to_sfixed(-0.9702957262759965, 22, -8),
        to_sfixed(-0.9659258262890683, 22, -8),
        to_sfixed(-0.9612616959383189, 22, -8),
        to_sfixed(-0.9563047559630354, 22, -8),
        to_sfixed(-0.9510565162951536, 22, -8),
        to_sfixed(-0.9455185755993167, 22, -8),
        to_sfixed(-0.9396926207859084, 22, -8),
        to_sfixed(-0.9335804264972017, 22, -8),
        to_sfixed(-0.9271838545667874, 22, -8),
        to_sfixed(-0.9205048534524404, 22, -8),
        to_sfixed(-0.9135454576426009, 22, -8),
        to_sfixed(-0.90630778703665, 22, -8),
        to_sfixed(-0.8987940462991669, 22, -8),
        to_sfixed(-0.8910065241883679, 22, -8),
        to_sfixed(-0.8829475928589269, 22, -8),
        to_sfixed(-0.8746197071393959, 22, -8),
        to_sfixed(-0.8660254037844386, 22, -8),
        to_sfixed(-0.8571673007021123, 22, -8),
        to_sfixed(-0.8480480961564261, 22, -8),
        to_sfixed(-0.838670567945424, 22, -8),
        to_sfixed(-0.8290375725550417, 22, -8),
        to_sfixed(-0.8191520442889918, 22, -8),
        to_sfixed(-0.8090169943749475, 22, -8),
        to_sfixed(-0.7986355100472928, 22, -8),
        to_sfixed(-0.788010753606722, 22, -8),
        to_sfixed(-0.7771459614569708, 22, -8),
        to_sfixed(-0.766044443118978, 22, -8),
        to_sfixed(-0.7547095802227721, 22, -8),
        to_sfixed(-0.7431448254773942, 22, -8),
        to_sfixed(-0.7313537016191706, 22, -8),
        to_sfixed(-0.7193398003386511, 22, -8),
        to_sfixed(-0.7071067811865477, 22, -8),
        to_sfixed(-0.6946583704589973, 22, -8),
        to_sfixed(-0.6819983600624986, 22, -8),
        to_sfixed(-0.6691306063588581, 22, -8),
        to_sfixed(-0.6560590289905073, 22, -8),
        to_sfixed(-0.6427876096865395, 22, -8),
        to_sfixed(-0.6293203910498378, 22, -8),
        to_sfixed(-0.6156614753256581, 22, -8),
        to_sfixed(-0.6018150231520483, 22, -8),
        to_sfixed(-0.5877852522924732, 22, -8),
        to_sfixed(-0.5735764363510464, 22, -8),
        to_sfixed(-0.5591929034707466, 22, -8),
        to_sfixed(-0.544639035015027, 22, -8),
        to_sfixed(-0.529919264233205, 22, -8),
        to_sfixed(-0.5150380749100544, 22, -8),
        to_sfixed(-0.5000000000000004, 22, -8),
        to_sfixed(-0.48480962024633684, 22, -8),
        to_sfixed(-0.46947156278589075, 22, -8),
        to_sfixed(-0.4539904997395469, 22, -8),
        to_sfixed(-0.43837114678907774, 22, -8),
        to_sfixed(-0.42261826174069916, 22, -8),
        to_sfixed(-0.4067366430758001, 22, -8),
        to_sfixed(-0.3907311284892738, 22, -8),
        to_sfixed(-0.3746065934159123, 22, -8),
        to_sfixed(-0.3583679495453007, 22, -8),
        to_sfixed(-0.34202014332566855, 22, -8),
        to_sfixed(-0.32556815445715664, 22, -8),
        to_sfixed(-0.30901699437494756, 22, -8),
        to_sfixed(-0.2923717047227371, 22, -8),
        to_sfixed(-0.2756373558169989, 22, -8),
        to_sfixed(-0.25881904510252063, 22, -8),
        to_sfixed(-0.24192189559966779, 22, -8),
        to_sfixed(-0.22495105434386525, 22, -8),
        to_sfixed(-0.2079116908177598, 22, -8),
        to_sfixed(-0.1908089953765446, 22, -8),
        to_sfixed(-0.17364817766693033, 22, -8),
        to_sfixed(-0.15643446504023104, 22, -8),
        to_sfixed(-0.13917310096006583, 22, -8),
        to_sfixed(-0.12186934340514717, 22, -8),
        to_sfixed(-0.10452846326765336, 22, -8),
        to_sfixed(-0.08715574274765825, 22, -8),
        to_sfixed(-0.06975647374412558, 22, -8),
        to_sfixed(-0.052335956242944306, 22, -8),
        to_sfixed(-0.03489949670250076, 22, -8),
        to_sfixed(-0.017452406437283498, 22, -8),
        to_sfixed(-1.8369701987210297e-16, 22, -8),
        to_sfixed(0.01745240643728313, 22, -8),
        to_sfixed(0.03489949670250128, 22, -8),
        to_sfixed(0.052335956242943946, 22, -8),
        to_sfixed(0.06975647374412522, 22, -8),
        to_sfixed(0.08715574274765789, 22, -8),
        to_sfixed(0.10452846326765299, 22, -8),
        to_sfixed(0.12186934340514768, 22, -8),
        to_sfixed(0.13917310096006547, 22, -8),
        to_sfixed(0.15643446504023067, 22, -8),
        to_sfixed(0.17364817766692997, 22, -8),
        to_sfixed(0.1908089953765451, 22, -8),
        to_sfixed(0.20791169081775943, 22, -8),
        to_sfixed(0.22495105434386492, 22, -8),
        to_sfixed(0.24192189559966742, 22, -8),
        to_sfixed(0.2588190451025203, 22, -8),
        to_sfixed(0.2756373558169994, 22, -8),
        to_sfixed(0.2923717047227367, 22, -8),
        to_sfixed(0.30901699437494723, 22, -8),
        to_sfixed(0.3255681544571563, 22, -8),
        to_sfixed(0.342020143325669, 22, -8),
        to_sfixed(0.3583679495453004, 22, -8),
        to_sfixed(0.37460659341591196, 22, -8),
        to_sfixed(0.3907311284892735, 22, -8),
        to_sfixed(0.40673664307579976, 22, -8),
        to_sfixed(0.4226182617406996, 22, -8),
        to_sfixed(0.4383711467890774, 22, -8),
        to_sfixed(0.45399049973954664, 22, -8),
        to_sfixed(0.4694715627858904, 22, -8),
        to_sfixed(0.4848096202463373, 22, -8),
        to_sfixed(0.5000000000000001, 22, -8),
        to_sfixed(0.5150380749100542, 22, -8),
        to_sfixed(0.5299192642332047, 22, -8),
        to_sfixed(0.5446390350150266, 22, -8),
        to_sfixed(0.559192903470747, 22, -8),
        to_sfixed(0.573576436351046, 22, -8),
        to_sfixed(0.5877852522924729, 22, -8),
        to_sfixed(0.6018150231520479, 22, -8),
        to_sfixed(0.6156614753256585, 22, -8),
        to_sfixed(0.6293203910498375, 22, -8),
        to_sfixed(0.6427876096865393, 22, -8),
        to_sfixed(0.656059028990507, 22, -8),
        to_sfixed(0.6691306063588578, 22, -8),
        to_sfixed(0.6819983600624986, 22, -8),
        to_sfixed(0.6946583704589973, 22, -8),
        to_sfixed(0.7071067811865474, 22, -8),
        to_sfixed(0.7193398003386509, 22, -8),
        to_sfixed(0.7313537016191707, 22, -8),
        to_sfixed(0.7431448254773942, 22, -8),
        to_sfixed(0.7547095802227719, 22, -8),
        to_sfixed(0.7660444431189778, 22, -8),
        to_sfixed(0.7771459614569706, 22, -8),
        to_sfixed(0.788010753606722, 22, -8),
        to_sfixed(0.7986355100472928, 22, -8),
        to_sfixed(0.8090169943749473, 22, -8),
        to_sfixed(0.8191520442889916, 22, -8),
        to_sfixed(0.8290375725550418, 22, -8),
        to_sfixed(0.838670567945424, 22, -8),
        to_sfixed(0.8480480961564258, 22, -8),
        to_sfixed(0.8571673007021121, 22, -8),
        to_sfixed(0.8660254037844384, 22, -8),
        to_sfixed(0.8746197071393959, 22, -8),
        to_sfixed(0.882947592858927, 22, -8),
        to_sfixed(0.8910065241883678, 22, -8),
        to_sfixed(0.8987940462991668, 22, -8),
        to_sfixed(0.90630778703665, 22, -8),
        to_sfixed(0.913545457642601, 22, -8),
        to_sfixed(0.9205048534524403, 22, -8),
        to_sfixed(0.9271838545667873, 22, -8),
        to_sfixed(0.9335804264972015, 22, -8),
        to_sfixed(0.9396926207859084, 22, -8),
        to_sfixed(0.9455185755993168, 22, -8),
        to_sfixed(0.9510565162951535, 22, -8),
        to_sfixed(0.9563047559630353, 22, -8),
        to_sfixed(0.9612616959383189, 22, -8),
        to_sfixed(0.9659258262890683, 22, -8),
        to_sfixed(0.9702957262759965, 22, -8),
        to_sfixed(0.9743700647852351, 22, -8),
        to_sfixed(0.9781476007338056, 22, -8),
        to_sfixed(0.981627183447664, 22, -8),
        to_sfixed(0.984807753012208, 22, -8),
        to_sfixed(0.9876883405951377, 22, -8),
        to_sfixed(0.9902680687415703, 22, -8),
        to_sfixed(0.9925461516413221, 22, -8),
        to_sfixed(0.9945218953682733, 22, -8),
        to_sfixed(0.9961946980917455, 22, -8),
        to_sfixed(0.9975640502598242, 22, -8),
        to_sfixed(0.9986295347545738, 22, -8),
        to_sfixed(0.9993908270190958, 22, -8),
        to_sfixed(0.9998476951563913, 22, -8)
    );

    -- -- The lookup talble for tangent
    -- CONSTANT tan_table : tan_table_type := (
    --     "00000000000000000000000000000000",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011010011010000001010010110100",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101",
    --     "10100101000011010011000100110010",
    --     "00111100100011101111110111101101",
    --     "00111101000011110000100100010101",
    --     "00111101010101101010100110001010",
    --     "00111101100011110011010111001010",
    --     "00111101101100110010110101000010",
    --     "00111101110101110100000011100100",
    --     "00111101111110110111011001111001",
    --     "00111110000011111110100111110000",
    --     "00111110001000100010111110001000",
    --     "00111110001101001000111100001111",
    --     "00111110010001110000101110100010",
    --     "00111110010110011010100001101101",
    --     "00111110011011000110100010110110",
    --     "00111110011111110100111111010111",
    --     "00111110100010010011000010100011",
    --     "00111110100100101101000001001011",
    --     "00111110100111001000100010111011",
    --     "00111110101001100101101111100000",
    --     "00111110101100000100101110110101",
    --     "00111110101110100101101001001110",
    --     "00111110110001001000100111010100",
    --     "00111110110011101101110010000111",
    --     "00111110110110010101010011000011",
    --     "00111110111000111111010100000100",
    --     "00111110111011101011111111100001",
    --     "00111110111110011011100000010110",
    --     "00111111000000100111000001000011",
    --     "00111111000010000001111000011100",
    --     "00111111000011011110011100110011",
    --     "00111111000100111100110100111010",
    --     "00111111000110011101001000000000",
    --     "00111111000111111111011101110000",
    --     "00111111001001100011111110010011",
    --     "00111111001011001010110010010111",
    --     "00111111001100110100000011001101",
    --     "00111111001110011111111010110001",
    --     "00111111010000001110100011101011",
    --     "00111111010010000000001001010110",
    --     "00111111010011110100111000000010",
    --     "00111111010101101100111100111100",
    --     "00111111010111101000100110010011",
    --     "00111111011001101000000011100001",
    --     "00111111011011101011100101001111",
    --     "00111111011101110011011101100001",
    --     "00111111100000000000000000000000",
    --     "00111111100001001000110001000010",
    --     "00111111100010010100001101100001",
    --     "00111111100011100010100010001101",
    --     "00111111100100110011111101000110",
    --     "00111111100110001000101101100010",
    --     "00111111100111100001000100011100",
    --     "00111111101000111101010100100001",
    --     "00111111101010011101110010011011",
    --     "00111111101100000010110101001000",
    --     "00111111101101101100110110001110",
    --     "00111111101111011100010010001111",
    --     "00111111110001010001101001001100",
    --     "00111111110011001101011111000011",
    --     "00111111110101010000011100011100",
    --     "00111111110111011011001111010111",
    --     "00111111111001101110101100001001",
    --     "00111111111100001011101110100101",
    --     "00111111111110110011011011010010",
    --     "01000000000000110011100000101110",
    --     "01000000000010010011111110011010",
    --     "01000000000011111011111100010001",
    --     "01000000000101101100011001001001",
    --     "01000000000111100110011111010011",
    --     "01000000001001101011100111000111",
    --     "01000000001011111101011010101100",
    --     "01000000001110011101111010010111",
    --     "01000000010001001111100011000100",
    --     "01000000010100010101010110100110",
    --     "01000000010111110011000111001100",
    --     "01000000011011101101100111101100",
    --     "01000000100000000101100001010001",
    --     "01000000100010101001101101110011",
    --     "01000000100101101000110001010100",
    --     "01000000101001001010000000110000",
    --     "01000000101101010111101100100100",
    --     "01000000110010100000101001000001",
    --     "01000000111000111011000100011100",
    --     "01000001000000100100111100111110",
    --     "01000001000110000011101011010110",
    --     "01000001001101101110000101111111",
    --     "01000001011001001100111110000111",
    --     "01000001100110001010011000101011",
    --     "01000001111001010001011100001100",
    --     "01000010011001010010100011101100",
    --     "01011001100110101011100001111000",
    --     "11000010011001010010100011101100",
    --     "11000001111001010001011100001100",
    --     "11000001100110001010011000101011",
    --     "11000001011001001100111110000111",
    --     "11000001001101101110000101111111",
    --     "11000001000110000011101011010110",
    --     "11000001000000100100111100111110",
    --     "11000000111000111011000100011100",
    --     "11000000110010100000101001000001",
    --     "11000000101101010111101100100100",
    --     "11000000101001001010000000110000",
    --     "11000000100101101000110001010100",
    --     "11000000100010101001101101110011",
    --     "11000000100000000101100001010001",
    --     "11000000011011101101100111101100",
    --     "11000000010111110011000111001100",
    --     "11000000010100010101010110100110",
    --     "11000000010001001111100011000100",
    --     "11000000001110011101111010010111",
    --     "11000000001011111101011010101100",
    --     "11000000001001101011100111000111",
    --     "11000000000111100110011111010011",
    --     "11000000000101101100011001001001",
    --     "11000000000011111011111100010001",
    --     "11000000000010010011111110011010",
    --     "11000000000000110011100000101110",
    --     "10111111111110110011011011010010",
    --     "10111111111100001011101110100101",
    --     "10111111111001101110101100001001",
    --     "10111111110111011011001111010111",
    --     "10111111110101010000011100011100",
    --     "10111111110011001101011111000011",
    --     "10111111110001010001101001001100",
    --     "10111111101111011100010010001111",
    --     "10111111101101101100110110001110",
    --     "10111111101100000010110101001000",
    --     "10111111101010011101110010011011",
    --     "10111111101000111101010100100001",
    --     "10111111100111100001000100011100",
    --     "10111111100110001000101101100010",
    --     "10111111100100110011111101000110",
    --     "10111111100011100010100010001101",
    --     "10111111100010010100001101100001",
    --     "10111111100001001000110001000010",
    --     "10111111100000000000000000000000",
    --     "10111111011101110011011101100001",
    --     "10111111011011101011100101001111",
    --     "10111111011001101000000011100001",
    --     "10111111010111101000100110010011",
    --     "10111111010101101100111100111100",
    --     "10111111010011110100111000000010",
    --     "10111111010010000000001001010110",
    --     "10111111010000001110100011101011",
    --     "10111111001110011111111010110001",
    --     "10111111001100110100000011001101",
    --     "10111111001011001010110010010111",
    --     "10111111001001100011111110010011",
    --     "10111111000111111111011101110000",
    --     "10111111000110011101001000000000",
    --     "10111111000100111100110100111010",
    --     "10111111000011011110011100110011",
    --     "10111111000010000001111000011100",
    --     "10111111000000100111000001000011",
    --     "10111110111110011011100000010110",
    --     "10111110111011101011111111100001",
    --     "10111110111000111111010100000100",
    --     "10111110110110010101010011000011",
    --     "10111110110011101101110010000111",
    --     "10111110110001001000100111010100",
    --     "10111110101110100101101001001110",
    --     "10111110101100000100101110110101",
    --     "10111110101001100101101111100000",
    --     "10111110100111001000100010111011",
    --     "10111110100100101101000001001011",
    --     "10111110100010010011000010100011",
    --     "10111110011111110100111111010111",
    --     "10111110011011000110100010110110",
    --     "10111110010110011010100001101101",
    --     "10111110010001110000101110100010",
    --     "10111110001101001000111100001111",
    --     "10111110001000100010111110001000",
    --     "10111110000011111110100111110000",
    --     "10111101111110110111011001111001",
    --     "10111101110101110100000011100100",
    --     "10111101101100110010110101000010",
    --     "10111101100011110011010111001010",
    --     "10111101010101101010100110001010",
    --     "10111101000011110000100100010101",
    --     "10111100100011101111110111101101"
    -- );

    -- The function of sin that returns a fixed
    -- It will also normalize the input to [0, 359]
    FUNCTION sin_fixed (x : INTEGER) RETURN sfixed;

    -- The function of cos that returns a fixed
    -- It will also normalize the input to [0, 359]
    FUNCTION cos_fixed (x : INTEGER) RETURN sfixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------
    TYPE vec2_int IS ARRAY (0 TO 1) OF INTEGER;
    TYPE vec3_int IS ARRAY (0 TO 2) OF INTEGER;
    TYPE vec4_int IS ARRAY (0 TO 3) OF INTEGER;

    TYPE vec2_fixed IS ARRAY (0 TO 1) OF sfixed(22 DOWNTO -8);
    TYPE vec3_fixed IS ARRAY (0 TO 2) OF sfixed(22 DOWNTO -8);
    TYPE vec4_fixed IS ARRAY (0 TO 3) OF sfixed(22 DOWNTO -8);

    TYPE mat3_int IS ARRAY (0 TO 2) OF vec3_int;
    TYPE mat4_int IS ARRAY (0 TO 3) OF vec4_int;

    TYPE mat3_fixed IS ARRAY (0 TO 2) OF vec3_fixed;
    TYPE mat4_fixed IS ARRAY (0 TO 3) OF vec4_fixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix Operations
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int;

    -- --------------------------------------------------------------------
    -- fixed type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_fixed) RETURN vec2_fixed;
    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_fixed) RETURN vec2_fixed;
    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_fixed) RETURN sfixed;
    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_fixed; b : sfixed) RETURN vec2_fixed;
    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_fixed; b : sfixed) RETURN vec2_fixed;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_fixed) RETURN vec3_fixed;
    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_fixed) RETURN vec3_fixed;
    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_fixed) RETURN sfixed;
    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_fixed; b : sfixed) RETURN vec3_fixed;
    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_fixed; b : sfixed) RETURN vec3_fixed;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_fixed) RETURN vec4_fixed;
    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_fixed) RETURN vec4_fixed;
    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_fixed) RETURN sfixed;
    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_fixed; b : sfixed) RETURN vec4_fixed;
    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_fixed; b : sfixed) RETURN vec4_fixed;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_fixed; b : vec3_fixed) RETURN vec3_fixed;

    -- -- Normalize the vector
    -- FUNCTION normalize (a : vec2_fixed) RETURN vec2_fixed;
    -- FUNCTION normalize (a : vec3_fixed) RETURN vec3_fixed;
    -- FUNCTION normalize (a : vec4_fixed) RETURN vec4_fixed;

    -- -- Length of the vector
    -- FUNCTION length (a : vec2_fixed) RETURN fixed;
    -- FUNCTION length (a : vec3_fixed) RETURN fixed;
    -- FUNCTION length (a : vec4_fixed) RETURN fixed;

    -- -- Distance between two vectors
    -- FUNCTION distance (a, b : vec2_fixed) RETURN fixed;
    -- FUNCTION distance (a, b : vec3_fixed) RETURN fixed;
    -- FUNCTION distance (a, b : vec4_fixed) RETURN fixed;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_fixed) RETURN mat3_fixed;
    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_fixed; b : vec3_fixed) RETURN vec3_fixed;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_fixed) RETURN mat4_fixed;
    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_fixed; b : vec4_fixed) RETURN vec4_fixed;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_fixed) RETURN vec2_int;
    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int;
    FUNCTION to_vec3_int (a : vec3_fixed) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int;
    FUNCTION to_vec3_int (a : vec4_int) RETURN vec3_int;
    FUNCTION to_vec4_int (a : vec4_fixed) RETURN vec4_int;
    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int;
    FUNCTION to_mat3_int (a : mat3_fixed) RETURN mat3_int;
    FUNCTION to_mat4_int (a : mat4_fixed) RETURN mat4_int;
    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int;

    -- To fixed type
    FUNCTION to_vec2_fixed (a : vec2_int) RETURN vec2_fixed;
    FUNCTION to_vec2_fixed (a : vec3_fixed) RETURN vec2_fixed;
    FUNCTION to_vec3_fixed (a : vec3_int) RETURN vec3_fixed;
    FUNCTION to_vec3_fixed (a : vec2_fixed; w : sfixed) RETURN vec3_fixed;
    FUNCTION to_vec3_fixed (a : vec4_fixed) RETURN vec3_fixed;
    FUNCTION to_vec4_fixed (a : vec4_int) RETURN vec4_fixed;
    FUNCTION to_vec4_fixed (a : vec3_fixed; w : sfixed) RETURN vec4_fixed;
    FUNCTION to_mat3_fixed (a : mat3_int) RETURN mat3_fixed;
    FUNCTION to_mat4_fixed (a : mat4_int) RETURN mat4_fixed;
    FUNCTION to_mat4_fixed (a : mat3_fixed) RETURN mat4_fixed;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- -- Perspective Projection
    -- FUNCTION perspective (left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed;
    -- -- Orthographic Projection
    -- FUNCTION orthographic (left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed;
    -- -- Look at function for the view matrix
    -- FUNCTION look_at (eye, at, up : vec3_int) RETURN mat4_fixed;

    -- --------------------------------------------------------------------
    --                Constants
    -- --------------------------------------------------------------------
    -- CONSTANT fixed_zero : fixed := "00000000000000000000000000000000";
    -- CONSTANT fixed_one : fixed := "00111111100000000000000000000000";
    -- CONSTANT fixed_neg_one : fixed := "10111111100000000000000000000000";
    CONSTANT fixed_zero : sfixed(22 DOWNTO -8) := to_sfixed(0.0, 22, -8);
    CONSTANT fixed_one : sfixed(22 DOWNTO -8) := to_sfixed(1.0, 22, -8);
    CONSTANT fixed_neg_one : sfixed(22 DOWNTO -8) := to_sfixed(-1.0, 22, -8);

    CONSTANT vec2_int_zero : vec2_int := (0, 0);
    CONSTANT vec2_int_one : vec2_int := (1, 1);
    CONSTANT vec2_int_neg_one : vec2_int := (-1, -1);

    CONSTANT vec2_fixed_zero : vec2_fixed := (fixed_zero, fixed_zero);
    CONSTANT vec2_fixed_one : vec2_fixed := (fixed_one, fixed_one);
    CONSTANT vec2_fixed_neg_one : vec2_fixed := (fixed_neg_one, fixed_neg_one);

    CONSTANT vec3_int_zero : vec3_int := (0, 0, 0);
    CONSTANT vec3_int_one : vec3_int := (1, 1, 1);
    CONSTANT vec3_int_neg_one : vec3_int := (-1, -1, -1);

    -- CONSTANT vec3_fixed_zero : vec3_fixed := (fixed_zero, fixed_zero, fixed_zero);
    -- CONSTANT vec3_fixed_one : vec3_fixed := (fixed_one, fixed_one, fixed_one);
    -- CONSTANT vec3_fixed_neg_one : vec3_fixed := (fixed_neg_one, fixed_neg_one, fixed_neg_one);

    CONSTANT vec4_int_zero : vec4_int := (0, 0, 0, 0);
    CONSTANT vec4_int_one : vec4_int := (1, 1, 1, 1);
    CONSTANT vec4_int_neg_one : vec4_int := (-1, -1, -1, -1);

    CONSTANT vec4_fixed_zero : vec4_fixed := (fixed_zero, fixed_zero, fixed_zero, fixed_zero);
    CONSTANT vec4_fixed_one : vec4_fixed := (fixed_one, fixed_one, fixed_one, fixed_one);
    CONSTANT vec4_fixed_neg_one : vec4_fixed := (fixed_neg_one, fixed_neg_one, fixed_neg_one, fixed_neg_one);

    CONSTANT identity_mat3_int : mat3_int := ((1, 0, 0), (0, 1, 0), (0, 0, 1));
    CONSTANT identity_mat4_int : mat4_int := ((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1));
    CONSTANT identity_mat3_fixed : mat3_fixed := (
    (fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one)
    );
    CONSTANT identity_mat4_fixed : mat4_fixed := (
    (fixed_one, fixed_zero, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    );
    -- CONSTANT default_perspective_mat4_fixed : mat4_fixed := (
    -- ("00111111110111011011001111010111", fixed_zero, fixed_one, fixed_zero),
    --     (fixed_zero, "00111111110111011011001111010111", fixed_neg_one, fixed_zero),
    --     (fixed_zero, fixed_zero, "00111111100000000000000001010100", fixed_neg_one),
    --     (fixed_zero, fixed_zero, "10111101110011001101001000001011", fixed_zero)
    -- );
    -- With 131072 as the scale factor
    -- CONSTANT default_perspective_mat4_fixed : mat4_fixed := (
    -- (227023, fixed_zero, fixed_one, fixed_zero),
    --     (fixed_zero, 227023, fixed_neg_one, fixed_zero),
    --     (fixed_zero, fixed_zero, fixed_one, fixed_neg_one),
    --     (fixed_zero, fixed_zero, -13108, fixed_zero)
    -- );
    -- With 512 as the scale factor
    CONSTANT default_perspective_mat4_fixed : mat4_fixed := (
    (to_sfixed(1.73205077648, 22, -8), fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, to_sfixed(1.73205077648, 22, -8), fixed_neg_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_neg_one),
        (fixed_zero, fixed_zero, to_sfixed(-0.100010000169, 22, -8), fixed_zero)
    );
    -- CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    -- ("00111011000000000000000000000000", fixed_zero, fixed_zero, fixed_neg_one),
    --     (fixed_zero, "00111011010110100111010000001110", fixed_zero, fixed_neg_one),
    --     (fixed_zero, fixed_zero, "10111001010100011011110001110110", "10111111100000000000011010001110"),
    --     (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    -- );
    -- With 131072 as the scale factor, the following matrix is equivalent to the one above
    -- CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    -- (256, fixed_zero, fixed_zero, fixed_neg_one),
    --     (fixed_zero, 436, fixed_zero, fixed_neg_one),
    --     (fixed_zero, fixed_zero, -26, -100),
    --     (fixed_zero, fixed_zero, fixed_zero, -131098)
    -- );
    -- With 512 as the scale factor, the following matrix is equivalent to the one above
    -- CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    -- (to_sfixed(0.001953125, 22, -8), fixed_zero, fixed_zero, fixed_neg_one),
    --     (fixed_zero, to_sfixed(-0.003333333, 22, -8), fixed_zero, fixed_neg_one),
    --     (fixed_zero, fixed_zero, to_sfixed(-0.000200020002, 22, -8), to_sfixed(-1.00020002, 22, -8)),
    --     (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    -- );
    CONSTANT default_ortho_mat4_fixed : mat4_fixed := (
    (to_sfixed(0.001953125, 22, -8), fixed_zero, fixed_zero, fixed_neg_one),
        (fixed_zero, to_sfixed(-0.003333333, 22, -8), fixed_zero, fixed_neg_one),
        (fixed_zero, fixed_zero, to_sfixed(-0.000200020002, 22, -8), to_sfixed(-1.00020002, 22, -8)),
        (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    );
    CONSTANT look_forward_mat4_fixed : mat4_fixed := (
    (fixed_one, fixed_zero, fixed_zero, fixed_zero),
        (fixed_zero, fixed_one, fixed_zero, fixed_zero),
        (fixed_zero, fixed_zero, fixed_one, fixed_zero),
        (fixed_zero, fixed_zero, fixed_zero, fixed_one)
    );

    -- --------------------------------------------------------------------
    --               Transformation
    -- --------------------------------------------------------------------
    -- Translation
    FUNCTION translation_mat4_fixed (displacement : vec3_int) RETURN mat4_fixed;
    -- Rotation around X axis
    FUNCTION rotation_x_mat4_fixed (angle : INTEGER) RETURN mat4_fixed;
    -- Rotation around Y axis
    FUNCTION rotation_y_mat4_fixed (angle : INTEGER) RETURN mat4_fixed;
    -- Rotation around Z axis
    FUNCTION rotation_z_mat4_fixed (angle : INTEGER) RETURN mat4_fixed;
    -- Rotation
    FUNCTION rotation_mat4_fixed (euler : vec3_int) RETURN mat4_fixed;
    -- Scaling
    FUNCTION scaling_mat4_fixed (scale : vec3_int) RETURN mat4_fixed;

END PACKAGE;

PACKAGE BODY math3D_pkg IS
    -- --------------------------------------------------------------------
    --            Trigonometric Func
    -- --------------------------------------------------------------------
    FUNCTION sin_fixed (x : INTEGER) RETURN sfixed IS
    BEGIN
        IF x < 0 THEN
            RETURN resize(sin_table(-x MOD 360) * to_sfixed(-1, 22, -8), 22, -8);
        ELSE
            RETURN sin_table(x MOD 360);
        END IF;
    END sin_fixed;

    FUNCTION cos_fixed (x : INTEGER) RETURN sfixed IS
    BEGIN
        IF x < 0 THEN
            RETURN cos_table(-x MOD 360);
        ELSE
            RETURN cos_table(x MOD 360);
        END IF;
    END cos_fixed;

    -- --------------------------------------------------------------------
    --            Vector and Matrix
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_int; b : INTEGER) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_int; b : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_int) RETURN INTEGER IS
        VARIABLE result : INTEGER;
    BEGIN
        result := a(0) * b(0) + a(1) * b(1) + a(2) * b(2) + a(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) * b;
        result(1) := a(1) * b;
        result(2) := a(2) * b;
        result(3) := a(3) * b;
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_int; b : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0) / b;
        result(1) := a(1) / b;
        result(2) := a(2) / b;
        result(3) := a(3) / b;
        RETURN result;
    END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_int) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_int; b : vec3_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0);
        result(0)(1) := a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1);
        result(0)(2) := a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2);
        result(0)(3) := a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3);

        result(1)(0) := a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0);
        result(1)(1) := a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1);
        result(1)(2) := a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2);
        result(1)(3) := a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3);

        result(2)(0) := a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0);
        result(2)(1) := a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1);
        result(2)(2) := a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2);
        result(2)(3) := a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3);

        result(3)(0) := a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0);
        result(3)(1) := a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1);
        result(3)(2) := a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2);
        result(3)(3) := a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_int; b : vec4_int) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3);
        result(1) := a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3);
        result(2) := a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3);
        result(3) := a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- fixed type data structures
    -- --------------------------------------------------------------------

    -- Vector2 Addition
    FUNCTION "+" (a, b : vec2_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := resize(a(0) + b(0), 22, -8);
        result(1) := resize(a(1) + b(1), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector2 Subtraction
    FUNCTION "-" (a, b : vec2_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := resize(a(0) - b(0), 22, -8);
        result(1) := resize(a(1) - b(1), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector2 Dot Product
    FUNCTION "*" (a, b : vec2_fixed) RETURN sfixed IS
        VARIABLE result : sfixed;
    BEGIN
        result := resize(a(0) * b(0) + a(1) * b(1), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Multiplication
    FUNCTION "*" (a : vec2_fixed; b : sfixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := resize(a(0) * b, 22, -8);
        result(1) := resize(a(1) * b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector2 Scalar Division
    FUNCTION "/" (a : vec2_fixed; b : sfixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := resize(a(0) / b, 22, -8);
        result(1) := resize(a(1) / b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector3 Addition
    FUNCTION "+" (a, b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize(a(0) + b(0), 22, -8);
        result(1) := resize(a(1) + b(1), 22, -8);
        result(2) := resize(a(2) + b(2), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector3 Subtraction
    FUNCTION "-" (a, b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize(a(0) - b(0), 22, -8);
        result(1) := resize(a(1) - b(1), 22, -8);
        result(2) := resize(a(2) - b(2), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector3 Dot Product
    FUNCTION "*" (a, b : vec3_fixed) RETURN sfixed IS
        VARIABLE result : sfixed;
    BEGIN
        result := resize((a(0) * b(0) + a(1) * b(1) + a(2) * b(2)), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Multiplication
    FUNCTION "*" (a : vec3_fixed; b : sfixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize(a(0) * b, 22, -8);
        result(1) := resize(a(1) * b, 22, -8);
        result(2) := resize(a(2) * b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector3 Scalar Division
    FUNCTION "/" (a : vec3_fixed; b : sfixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize(a(0) / b, 22, -8);
        result(1) := resize(a(1) / b, 22, -8);
        result(2) := resize(a(2) / b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector4 Addition
    FUNCTION "+" (a, b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := resize(a(0) + b(0), 22, -8);
        result(1) := resize(a(1) + b(1), 22, -8);
        result(2) := resize(a(2) + b(2), 22, -8);
        result(3) := resize(a(3) + b(3), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector4 Subtraction
    FUNCTION "-" (a, b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := resize(a(0) - b(0), 22, -8);
        result(1) := resize(a(1) - b(1), 22, -8);
        result(2) := resize(a(2) - b(2), 22, -8);
        result(3) := resize(a(3) - b(3), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector4 Dot Product
    FUNCTION "*" (a, b : vec4_fixed) RETURN sfixed IS
        VARIABLE result : sfixed;
    BEGIN
        result := resize((a(0) * b(0)) + (a(1) * b(1)) + (a(2) * b(2)) + (a(3) * b(3)), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Multiplication
    FUNCTION "*" (a : vec4_fixed; b : sfixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := resize(a(0) * b, 22, -8);
        result(1) := resize(a(1) * b, 22, -8);
        result(2) := resize(a(2) * b, 22, -8);
        result(3) := resize(a(3) * b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector4 Scalar Division
    FUNCTION "/" (a : vec4_fixed; b : sfixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := resize(a(0) / b, 22, -8);
        result(1) := resize(a(1) / b, 22, -8);
        result(2) := resize(a(2) / b, 22, -8);
        result(3) := resize(a(3) / b, 22, -8);
        RETURN result;
    END FUNCTION;

    -- Vector Cross Product
    FUNCTION cross (a : vec3_fixed; b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize((a(1) * b(2)) - (a(2) * b(1)), 22, -8);
        result(1) := resize((a(2) * b(0)) - (a(0) * b(2)), 22, -8);
        result(2) := resize((a(0) * b(1)) - (a(1) * b(0)), 22, -8);
        RETURN result;
    END FUNCTION;

    -- -- Vector Length
    -- FUNCTION length (a : vec2_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt(1);
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec3_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION length (a : vec4_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) * a(0)) + (a(1) * a(1)) + (a(2) * a(2)) + (a(3) * a(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Distance
    -- FUNCTION distance (a, b : vec2_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec3_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)));
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION distance (a, b : vec4_fixed) RETURN fixed IS
    --     VARIABLE result : integer;
    -- BEGIN
    --     result := sqrt((a(0) - b(0)) * (a(0) - b(0)) + (a(1) - b(1)) * (a(1) - b(1)) + (a(2) - b(2)) * (a(2) - b(2)) + (a(3) - b(3)) * (a(3) - b(3)));
    --     RETURN result;
    -- END FUNCTION;

    -- -- Vector Nomalization
    -- FUNCTION normalize (a : vec2_fixed) RETURN vec2_fixed IS
    --     VARIABLE result : vec2_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec3_fixed) RETURN vec3_fixed IS
    --     VARIABLE result : vec3_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- FUNCTION normalize (a : vec4_fixed) RETURN vec4_fixed IS
    --     VARIABLE result : vec4_fixed;
    --     VARIABLE length : integer;
    -- BEGIN
    --     length := sqrt(a(0) * a(0) + a(1) * a(1) + a(2) * a(2) + a(3) * a(3));
    --     result(0) := a(0) / length;
    --     result(1) := a(1) / length;
    --     result(2) := a(2) / length;
    --     result(3) := a(3) / length;
    --     RETURN result;
    -- END FUNCTION;

    -- Matrix3 Addition
    FUNCTION "+" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := resize(a(0)(0) + b(0)(0), 22, -8);
        result(0)(1) := resize(a(0)(1) + b(0)(1), 22, -8);
        result(0)(2) := resize(a(0)(2) + b(0)(2), 22, -8);

        result(1)(0) := resize(a(1)(0) + b(1)(0), 22, -8);
        result(1)(1) := resize(a(1)(1) + b(1)(1), 22, -8);
        result(1)(2) := resize(a(1)(2) + b(1)(2), 22, -8);

        result(2)(0) := resize(a(2)(0) + b(2)(0), 22, -8);
        result(2)(1) := resize(a(2)(1) + b(2)(1), 22, -8);
        result(2)(2) := resize(a(2)(2) + b(2)(2), 22, -8);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Subtraction
    FUNCTION "-" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := resize(a(0)(0) - b(0)(0), 22, -8);
        result(0)(1) := resize(a(0)(1) - b(0)(1), 22, -8);
        result(0)(2) := resize(a(0)(2) - b(0)(2), 22, -8);

        result(1)(0) := resize(a(1)(0) - b(1)(0), 22, -8);
        result(1)(1) := resize(a(1)(1) - b(1)(1), 22, -8);
        result(1)(2) := resize(a(1)(2) - b(1)(2), 22, -8);

        result(2)(0) := resize(a(2)(0) - b(2)(0), 22, -8);
        result(2)(1) := resize(a(2)(1) - b(2)(1), 22, -8);
        result(2)(2) := resize(a(2)(2) - b(2)(2), 22, -8);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Multiplication
    FUNCTION "*" (a, b : mat3_fixed) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := resize((a(0)(0) * b(0)(0)) + (a(0)(1) * b(1)(0)) + (a(0)(2) * b(2)(0)), 22, -8);
        result(0)(1) := resize((a(0)(0) * b(0)(1)) + (a(0)(1) * b(1)(1)) + (a(0)(2) * b(2)(1)), 22, -8);
        result(0)(2) := resize((a(0)(0) * b(0)(2)) + (a(0)(1) * b(1)(2)) + (a(0)(2) * b(2)(2)), 22, -8);
        result(1)(0) := resize((a(1)(0) * b(0)(0)) + (a(1)(1) * b(1)(0)) + (a(1)(2) * b(2)(0)), 22, -8);
        result(1)(1) := resize((a(1)(0) * b(0)(1)) + (a(1)(1) * b(1)(1)) + (a(1)(2) * b(2)(1)), 22, -8);
        result(1)(2) := resize((a(1)(0) * b(0)(2)) + (a(1)(1) * b(1)(2)) + (a(1)(2) * b(2)(2)), 22, -8);
        result(2)(0) := resize((a(2)(0) * b(0)(0)) + (a(2)(1) * b(1)(0)) + (a(2)(2) * b(2)(0)), 22, -8);
        result(2)(1) := resize((a(2)(0) * b(0)(1)) + (a(2)(1) * b(1)(1)) + (a(2)(2) * b(2)(1)), 22, -8);
        result(2)(2) := resize((a(2)(0) * b(0)(2)) + (a(2)(1) * b(1)(2)) + (a(2)(2) * b(2)(2)), 22, -8);

        RETURN result;
    END FUNCTION;

    -- Matrix3 Vector3 Multiplication
    FUNCTION "*" (a : mat3_fixed; b : vec3_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := resize(a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2), 22, -8);
        result(1) := resize(a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2), 22, -8);
        result(2) := resize(a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Addition
    FUNCTION "+" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0) := a(0) + b(0);
        result(1) := a(1) + b(1);
        result(2) := a(2) + b(2);
        result(3) := a(3) + b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Subtraction
    FUNCTION "-" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0) := a(0) - b(0);
        result(1) := a(1) - b(1);
        result(2) := a(2) - b(2);
        result(3) := a(3) - b(3);
        RETURN result;
    END FUNCTION;

    -- Matrix4 Multiplication
    FUNCTION "*" (a, b : mat4_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0)(0) := resize(a(0)(0) * b(0)(0) + a(0)(1) * b(1)(0) + a(0)(2) * b(2)(0) + a(0)(3) * b(3)(0), 22, -8);
        result(0)(1) := resize(a(0)(0) * b(0)(1) + a(0)(1) * b(1)(1) + a(0)(2) * b(2)(1) + a(0)(3) * b(3)(1), 22, -8);
        result(0)(2) := resize(a(0)(0) * b(0)(2) + a(0)(1) * b(1)(2) + a(0)(2) * b(2)(2) + a(0)(3) * b(3)(2), 22, -8);
        result(0)(3) := resize(a(0)(0) * b(0)(3) + a(0)(1) * b(1)(3) + a(0)(2) * b(2)(3) + a(0)(3) * b(3)(3), 22, -8);

        result(1)(0) := resize(a(1)(0) * b(0)(0) + a(1)(1) * b(1)(0) + a(1)(2) * b(2)(0) + a(1)(3) * b(3)(0), 22, -8);
        result(1)(1) := resize(a(1)(0) * b(0)(1) + a(1)(1) * b(1)(1) + a(1)(2) * b(2)(1) + a(1)(3) * b(3)(1), 22, -8);
        result(1)(2) := resize(a(1)(0) * b(0)(2) + a(1)(1) * b(1)(2) + a(1)(2) * b(2)(2) + a(1)(3) * b(3)(2), 22, -8);
        result(1)(3) := resize(a(1)(0) * b(0)(3) + a(1)(1) * b(1)(3) + a(1)(2) * b(2)(3) + a(1)(3) * b(3)(3), 22, -8);

        result(2)(0) := resize(a(2)(0) * b(0)(0) + a(2)(1) * b(1)(0) + a(2)(2) * b(2)(0) + a(2)(3) * b(3)(0), 22, -8);
        result(2)(1) := resize(a(2)(0) * b(0)(1) + a(2)(1) * b(1)(1) + a(2)(2) * b(2)(1) + a(2)(3) * b(3)(1), 22, -8);
        result(2)(2) := resize(a(2)(0) * b(0)(2) + a(2)(1) * b(1)(2) + a(2)(2) * b(2)(2) + a(2)(3) * b(3)(2), 22, -8);
        result(2)(3) := resize(a(2)(0) * b(0)(3) + a(2)(1) * b(1)(3) + a(2)(2) * b(2)(3) + a(2)(3) * b(3)(3), 22, -8);

        result(3)(0) := resize(a(3)(0) * b(0)(0) + a(3)(1) * b(1)(0) + a(3)(2) * b(2)(0) + a(3)(3) * b(3)(0), 22, -8);
        result(3)(1) := resize(a(3)(0) * b(0)(1) + a(3)(1) * b(1)(1) + a(3)(2) * b(2)(1) + a(3)(3) * b(3)(1), 22, -8);
        result(3)(2) := resize(a(3)(0) * b(0)(2) + a(3)(1) * b(1)(2) + a(3)(2) * b(2)(2) + a(3)(3) * b(3)(2), 22, -8);
        result(3)(3) := resize(a(3)(0) * b(0)(3) + a(3)(1) * b(1)(3) + a(3)(2) * b(2)(3) + a(3)(3) * b(3)(3), 22, -8);

        RETURN result;
    END FUNCTION;

    -- Matrix4 Vector4 Multiplication
    FUNCTION "*" (a : mat4_fixed; b : vec4_fixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := resize(a(0)(0) * b(0) + a(0)(1) * b(1) + a(0)(2) * b(2) + a(0)(3) * b(3), 22, -8);
        result(1) := resize(a(1)(0) * b(0) + a(1)(1) * b(1) + a(1)(2) * b(2) + a(1)(3) * b(3), 22, -8);
        result(2) := resize(a(2)(0) * b(0) + a(2)(1) * b(1) + a(2)(2) * b(2) + a(2)(3) * b(3), 22, -8);
        result(3) := resize(a(3)(0) * b(0) + a(3)(1) * b(1) + a(3)(2) * b(2) + a(3)(3) * b(3), 22, -8);

        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    -- Type Conversion
    -- --------------------------------------------------------------------

    -- To int type
    FUNCTION to_vec2_int (a : vec2_fixed) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_int (a : vec3_int) RETURN vec2_int IS
        VARIABLE result : vec2_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec3_fixed) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int (a : vec2_int; w : INTEGER) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_int(a : vec4_int) RETURN vec3_int IS
        VARIABLE result : vec3_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec4_fixed) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := to_integer(a(0));
        result(1) := to_integer(a(1));
        result(2) := to_integer(a(2));
        result(3) := to_integer(a(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_int (a : vec3_int; w : INTEGER) RETURN vec4_int IS
        VARIABLE result : vec4_int;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_int (a : mat3_fixed) RETURN mat3_int IS
        VARIABLE result : mat3_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat4_fixed) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := to_integer(a(0)(0));
        result(0)(1) := to_integer(a(0)(1));
        result(0)(2) := to_integer(a(0)(2));
        result(0)(3) := to_integer(a(0)(3));

        result(1)(0) := to_integer(a(1)(0));
        result(1)(1) := to_integer(a(1)(1));
        result(1)(2) := to_integer(a(1)(2));
        result(1)(3) := to_integer(a(1)(3));

        result(2)(0) := to_integer(a(2)(0));
        result(2)(1) := to_integer(a(2)(1));
        result(2)(2) := to_integer(a(2)(2));
        result(2)(3) := to_integer(a(2)(3));

        result(3)(0) := to_integer(a(3)(0));
        result(3)(1) := to_integer(a(3)(1));
        result(3)(2) := to_integer(a(3)(2));
        result(3)(3) := to_integer(a(3)(3));
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_int (a : mat3_int) RETURN mat4_int IS
        VARIABLE result : mat4_int;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := 0;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := 0;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := 0;

        result(3)(0) := 0;
        result(3)(1) := 0;
        result(3)(2) := 0;
        result(3)(3) := 1;
        RETURN result;
    END FUNCTION;

    -- To fixed type
    FUNCTION to_vec2_fixed (a : vec2_int) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := to_sfixed(a(0), 22, -8);
        result(1) := to_sfixed(a(1), 22, -8);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec2_fixed (a : vec3_fixed) RETURN vec2_fixed IS
        VARIABLE result : vec2_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec3_int) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := to_sfixed((a(0)), 22, -8);
        result(1) := to_sfixed((a(1)), 22, -8);
        result(2) := to_sfixed((a(2)), 22, -8);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec2_fixed; w : sfixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec3_fixed (a : vec4_fixed) RETURN vec3_fixed IS
        VARIABLE result : vec3_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_fixed (a : vec4_int) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := to_sfixed((a(0)), 22, -8);
        result(1) := to_sfixed((a(1)), 22, -8);
        result(2) := to_sfixed((a(2)), 22, -8);
        result(3) := to_sfixed((a(3)), 22, -8);
        RETURN result;
    END FUNCTION;

    FUNCTION to_vec4_fixed (a : vec3_fixed; w : sfixed) RETURN vec4_fixed IS
        VARIABLE result : vec4_fixed;
    BEGIN
        result(0) := a(0);
        result(1) := a(1);
        result(2) := a(2);
        result(3) := w;
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat3_fixed (a : mat3_int) RETURN mat3_fixed IS
        VARIABLE result : mat3_fixed;
    BEGIN
        result(0)(0) := to_sfixed((a(0)(0)), 22, -8);
        result(0)(1) := to_sfixed((a(0)(1)), 22, -8);
        result(0)(2) := to_sfixed((a(0)(2)), 22, -8);

        result(1)(0) := to_sfixed((a(1)(0)), 22, -8);
        result(1)(1) := to_sfixed((a(1)(1)), 22, -8);
        result(1)(2) := to_sfixed((a(1)(2)), 22, -8);

        result(2)(0) := to_sfixed((a(2)(0)), 22, -8);
        result(2)(1) := to_sfixed((a(2)(1)), 22, -8);
        result(2)(2) := to_sfixed((a(2)(2)), 22, -8);
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_fixed (a : mat4_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0)(0) := to_sfixed((a(0)(0)), 22, -8);
        result(0)(1) := to_sfixed((a(0)(1)), 22, -8);
        result(0)(2) := to_sfixed((a(0)(2)), 22, -8);
        result(0)(3) := to_sfixed((a(0)(3)), 22, -8);

        result(1)(0) := to_sfixed((a(1)(0)), 22, -8);
        result(1)(1) := to_sfixed((a(1)(1)), 22, -8);
        result(1)(2) := to_sfixed((a(1)(2)), 22, -8);
        result(1)(3) := to_sfixed((a(1)(3)), 22, -8);

        result(2)(0) := to_sfixed((a(2)(0)), 22, -8);
        result(2)(1) := to_sfixed((a(2)(1)), 22, -8);
        result(2)(2) := to_sfixed((a(2)(2)), 22, -8);
        result(2)(3) := to_sfixed((a(2)(3)), 22, -8);

        result(3)(0) := to_sfixed((a(3)(0)), 22, -8);
        result(3)(1) := to_sfixed((a(3)(1)), 22, -8);
        result(3)(2) := to_sfixed((a(3)(2)), 22, -8);
        result(3)(3) := to_sfixed((a(3)(3)), 22, -8);
        RETURN result;
    END FUNCTION;

    FUNCTION to_mat4_fixed (a : mat3_fixed) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result(0)(0) := a(0)(0);
        result(0)(1) := a(0)(1);
        result(0)(2) := a(0)(2);
        result(0)(3) := fixed_zero;

        result(1)(0) := a(1)(0);
        result(1)(1) := a(1)(1);
        result(1)(2) := a(1)(2);
        result(1)(3) := fixed_zero;

        result(2)(0) := a(2)(0);
        result(2)(1) := a(2)(1);
        result(2)(2) := a(2)(2);
        result(2)(3) := fixed_zero;

        result(3)(0) := fixed_zero;
        result(3)(1) := fixed_zero;
        result(3)(2) := fixed_zero;
        result(3)(3) := fixed_one;
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --                Transform
    -- --------------------------------------------------------------------
    -- Translate
    FUNCTION translation_mat4_fixed (displacement : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result := identity_mat4_fixed;
        result(0)(3) := to_sfixed((displacement(0)), 22, -8);
        result(1)(3) := to_sfixed((displacement(1)), 22, -8);
        result(2)(3) := to_sfixed((displacement(2)), 22, -8);
        RETURN result;
    END FUNCTION;

    -- Rotation around X axis
    FUNCTION rotation_x_mat4_fixed (angle : INTEGER) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
        VARIABLE cos_angle, sin_angle : sfixed(22 DOWNTO -8);
    BEGIN
        result := identity_mat4_fixed;
        cos_angle := cos_fixed(angle);
        sin_angle := sin_fixed(angle);
        result(1)(1) := cos_angle;
        result(1)(2) := resize(sin_angle * to_sfixed(-1, 22, -8), 22, -8);
        result(2)(1) := sin_angle;
        result(2)(2) := cos_angle;
        RETURN result;
    END FUNCTION;

    -- Rotation around Y axis
    FUNCTION rotation_y_mat4_fixed (angle : INTEGER) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
        VARIABLE cos_angle, sin_angle : sfixed(22 DOWNTO -8);
    BEGIN
        result := identity_mat4_fixed;
        cos_angle := cos_fixed(angle);
        sin_angle := sin_fixed(angle);
        result(0)(0) := cos_angle;
        result(0)(2) := sin_angle;
        result(2)(0) := resize(sin_angle * to_sfixed(-1, 22, -8), 22, -8);
        result(2)(2) := cos_angle;
        RETURN result;
    END FUNCTION;

    -- Rotation around Z axis
    FUNCTION rotation_z_mat4_fixed (angle : INTEGER) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
        VARIABLE cos_angle, sin_angle : sfixed(22 DOWNTO -8);
    BEGIN
        result := identity_mat4_fixed;
        cos_angle := cos_fixed(angle);
        sin_angle := sin_fixed(angle);
        result(0)(0) := cos_angle;
        result(0)(1) := resize(sin_angle * to_sfixed(-1, 22, -8), 22, -8);
        result(1)(0) := sin_angle;
        result(1)(1) := cos_angle;
        RETURN result;
    END FUNCTION;

    -- Rotation
    FUNCTION rotation_mat4_fixed (euler : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
        VARIABLE a, b, c, d, e, f, g, h, i : sfixed(22 DOWNTO -8);
        VARIABLE cos_x, cos_y, cos_z, sin_x, sin_y, sin_z : sfixed(22 DOWNTO -8);
    BEGIN
        result := identity_mat4_fixed;

        cos_x := cos_fixed(euler(0));
        cos_y := cos_fixed(euler(1));
        cos_z := cos_fixed(euler(2));
        sin_x := sin_fixed(euler(0));
        sin_y := sin_fixed(euler(1));
        sin_z := sin_fixed(euler(2));

        a := resize(cos_y * cos_z, 22, -8);
        b := resize(cos_y * sin_z, 22, -8);
        c := resize(-sin_y, 22, -8);
        d := resize(sin_x * sin_y * cos_z - cos_x * sin_z, 22, -8);
        e := resize(sin_x * sin_y * sin_z + cos_x * cos_z, 22, -8);
        f := resize(sin_x * cos_y, 22, -8);
        g := resize(cos_x * sin_y * cos_z + sin_x * sin_z, 22, -8);
        h := resize(cos_x * sin_y * sin_z - sin_x * cos_z, 22, -8);
        i := resize(cos_x * cos_y, 22, -8);

        result(0)(0) := a;
        result(0)(1) := b;
        result(0)(2) := c;
        result(1)(0) := d;
        result(1)(1) := e;
        result(1)(2) := f;
        result(2)(0) := g;
        result(2)(1) := h;
        result(2)(2) := i;

        RETURN result;
    END FUNCTION;

    -- Scaling
    FUNCTION scaling_mat4_fixed (scale : vec3_int) RETURN mat4_fixed IS
        VARIABLE result : mat4_fixed;
    BEGIN
        result := identity_mat4_fixed;
        result(0)(0) := to_sfixed(scale(0), 22, -8);
        result(1)(1) := to_sfixed(scale(1), 22, -8);
        result(2)(2) := to_sfixed(scale(2), 22, -8);
        RETURN result;
    END FUNCTION;

    -- --------------------------------------------------------------------
    --               Projection
    -- --------------------------------------------------------------------
    -- -- Perspective Projection
    -- FUNCTION perspective(left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE l, r, b, t, n, f : INTEGER;
    -- BEGIN
    --     l := to_fixed(left);
    --     r := to_fixed(right);
    --     b := to_fixed(bottom);
    --     t := to_fixed(top);
    --     n := to_fixed(near);
    --     f := to_fixed(far);

    --     result(0)(0) := (n * 2) / (r - l);
    --     result(0)(1) := to_fixed(0.0);
    --     result(0)(2) := (r + l) / (r - l);
    --     result(0)(3) := to_fixed(0.0);

    --     result(1)(0) := to_fixed(0.0);
    --     result(1)(1) := (2 * n) / (t - b);
    --     result(1)(2) := (t + b) / (t - b);
    --     result(1)(3) := to_fixed(0.0);

    --     result(2)(0) := to_fixed(0.0);
    --     result(2)(1) := to_fixed(0.0);
    --     result(2)(2) := - 1.0 * (f + n) / (f - n);
    --     result(2)(3) := - 1.0 * (2 * f * n) / (f - n);

    --     result(3)(0) := to_fixed(0.0);
    --     result(3)(1) := to_fixed(0.0);
    --     result(3)(2) := to_fixed(-1.0);
    --     result(3)(3) := to_fixed(0.0);

    --     RETURN result;
    -- END FUNCTION;

    -- -- Orthographic Projection
    -- FUNCTION orthographic(left, right, bottom, top, near, far : INTEGER) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE l, r, b, t, n, f : INTEGER;
    -- BEGIN
    --     l := to_fixed(left);
    --     r := to_fixed(right);
    --     b := to_fixed(bottom);
    --     t := to_fixed(top);
    --     n := to_fixed(near);
    --     f := to_fixed(far);

    --     result(0)(0) := to_fixed(2.0) / (r - l);
    --     result(0)(1) := to_fixed(0.0);
    --     result(0)(2) := to_fixed(0.0);
    --     result(0)(3) := to_fixed(-1.0) * (r + l) / (r - l);

    --     result(1)(0) := to_fixed(0.0);
    --     result(1)(1) := to_fixed(2.0) / (t - b);
    --     result(1)(2) := to_fixed(0.0);
    --     result(1)(3) := to_fixed(-1.0) * (t + b) / (t - b);

    --     result(2)(0) := to_fixed(0.0);
    --     result(2)(1) := to_fixed(0.0);
    --     result(2)(2) := to_fixed(-2.0) / (f - n);
    --     result(2)(3) := to_fixed(-1.0) * (f + n) / (f - n);

    --     result(3)(0) := to_fixed(0.0);
    --     result(3)(1) := to_fixed(0.0);
    --     result(3)(2) := to_fixed(0.0);
    --     result(3)(3) := to_fixed(1.0);

    --     RETURN result;
    -- END FUNCTION;

    -- -- LookAt
    -- FUNCTION look_at(eye, at, up : vec3_int) RETURN mat4_fixed IS
    --     VARIABLE result : mat4_fixed;
    --     VARIABLE f, s, u : vec3_fixed;
    -- BEGIN
    --     f := normalize(to_vec3_fixed(at - eye));
    --     s := normalize(cross(f, to_vec3_fixed(up)));
    --     u := cross(s, f);

    --     result(0)(0) := s(0);
    --     result(0)(1) := u(0);
    --     result(0)(2) := - f(0);
    --     result(0)(3) := fixed_zero;

    --     result(1)(0) := s(1);
    --     result(1)(1) := u(1);
    --     result(1)(2) := - f(1);
    --     result(1)(3) := fixed_zero;

    --     result(2)(0) := s(2);
    --     result(2)(1) := u(2);
    --     result(2)(2) := - f(2);
    --     result(2)(3) := fixed_zero;

    --     result(3)(0) := fixed_zero;
    --     result(3)(1) := fixed_zero;
    --     result(3)(2) := fixed_zero;
    --     result(3)(3) := fixed_one;

    --     RETURN result;
    -- END FUNCTION;
END PACKAGE BODY;